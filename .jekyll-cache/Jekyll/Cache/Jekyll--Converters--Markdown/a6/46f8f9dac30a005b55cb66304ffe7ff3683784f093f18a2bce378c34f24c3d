I"—
<h3 id="1-llvm-project-clang">1 LLVM Project clang</h3>
<ol>
  <li>clang is the C compiler</li>
  <li>Clang++ is the C++ compiler
    <ul>
      <li>-std=<dialect>: option picks which dialect of a particular language you want
to use. if you need to ensure that you program is portable to an old C++98
compiler, you can compile it with -std=c++98</dialect></li>
    </ul>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang++ <span class="nt">-std</span><span class="o">=</span>c++11 my_class.cpp
clang++ <span class="si">$(</span>pkg-config <span class="nt">--cflags</span> <span class="nt">--libs</span> /usr/local/Cellar/opencv/4.3.0_4/lib/pkgconfig/opencv4.pc<span class="si">)</span> <span class="nt">-std</span><span class="o">=</span>c++14 smooth.cpp
</code></pre></div></div>
<h4 id="stage-selection-options">Stage Selection Options</h4>
<ol>
  <li>-E     Run the preprocessor stage.</li>
  <li>-S</li>
  <li>-c</li>
</ol>

<h4 id="assemble-code-generation">Assemble Code Generation</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// default output test.s</span>
<span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">S</span> <span class="o">-</span><span class="n">mllvm</span> <span class="o">--</span><span class="n">x86</span><span class="o">-</span><span class="k">asm</span><span class="o">-</span><span class="n">syntax</span><span class="o">=</span><span class="n">intel</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span>
</code></pre></div></div>
<h4 id="machine-code-generation-without-linked">Machine Code Generation without Linked</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">c</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span> <span class="c1">// default output test.o</span>
</code></pre></div></div>

<h3 id="2-gnu-project-gcc">2 GNU Project gcc</h3>
<h4 id="environment-variables">Environment Variables</h4>
<ol>
  <li>PATH: For searching the executables and run-time shared libraries.</li>
  <li>CPATH: For searching the include-paths for headers. It is searched after
paths specified in **-I<dir>** options.</dir></li>
  <li>LiBRARY_PATH: For searching library-paths for link libraries. It is searched
afer paths spefified in **-L<dir>** options</dir></li>
</ol>

<h4 id="option">option</h4>
<ol>
  <li>-o: specify the output file name</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g++ <span class="nt">-o</span> foo hello.cpp
</code></pre></div></div>
<ol>
  <li>-c: compile only</li>
  <li>-Wall: enables all compilers warning messages.</li>
  <li>-O: set the compilerâ€™s optimization level</li>
</ol>

<h4 id="dump-include-paths-from-g">Dump include Paths from g++</h4>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g++ <span class="nt">-E</span> <span class="nt">-x</span> c++ - <span class="nt">-v</span>&lt; /dev/null
</code></pre></div></div>

<h4 id="g-and-gcc">g++ and gcc</h4>
<p>g++ is equal to the following statement</p>
<ul>
  <li>first is a compiler option.</li>
  <li>second two are linker option.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gcc</span> <span class="o">-</span><span class="n">xc</span><span class="o">++</span> <span class="o">-</span><span class="n">lstdc</span><span class="o">++</span> <span class="o">-</span><span class="n">shared</span><span class="o">-</span><span class="n">libgcc</span>
</code></pre></div></div>

<h4 id="compilationg-process">Compilationg Process</h4>
<p><img src="/images/gcc-compilation-process.png" /></p>

:ET