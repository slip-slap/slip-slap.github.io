I"+
<p><strong>Terminology: detached head</strong>:
If you check the commit log, you will find something called “HEAD”.</p>
<ul>
  <li>This <em>HEAD</em> is a pointer which points to a commit.</li>
  <li>You can change any commit it points to in the history, but you can’t
make a commit if this commit does at the end of a branch, and we refer to this
<em>HEAD</em> pointer as <em>detached head</em>.</li>
  <li>It should attaches to a branch, not a random commit.</li>
</ul>

<h4 id="detached-head">Detached Head</h4>
<ol>
  <li>Detached head means you are no longer on a branch, you have checked out a
single commit in the history
    <ul>
      <li>why we have this, what’s the advantage?</li>
      <li>If you want to delete you changes associated with the detached Head, <strong>you
only need to checkout the branch you were on</strong></li>
    </ul>
  </li>
</ol>

<p><img align="left" src="/images/os-software-git-basic-detach-head-before-switch.png" /> <br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git switch liam
</code></pre></div></div>

<p><img align="left" src="/images/os-software-git-basic-detach-head-after-switch.png" /> <br /></p>

<h4 id="1-branch">1. branch</h4>

<p>can only be run after the merge has resulted in conflicts.
git merge –continue</p>

<h5 id="11-operation">1.1 Operation</h5>
<ul>
  <li>git branch                 display branch</li>
  <li>git branch develop         create branch</li>
</ul>

<h4 id="22-git--rebase">2.2 git  rebase</h4>
<p>This operation works by going to the common ancestor of the two branches(the one
you’re on and the one you’re rebasing onto), getting the diff introduced by each
commit of the branch you’re on</p>
<ul>
  <li>saving those diffs to temporary files</li>
  <li>resetting the current branch to the same commit as the branch you are rebasing
onto, and finally applying each change in turn.</li>
</ul>

<p><img align="left" src="/images/os-software-git-basic-rebase.png" /> <br /></p>

<ul>
  <li>don’t look the very explanation of it’s documentation, look at what does it
do</li>
  <li>it keeps the 2a615e commit, but throw the c07fbe commit away.</li>
  <li>you can simply just git rebase 2a615e</li>
  <li>this command create a new commit, it’s parent is 2a615e commit</li>
</ul>

<h4 id="example-run-into-a-merge-conflict-quit-merge">Example: run into a merge conflict, quit merge</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--merge</span>
</code></pre></div></div>

<h4 id="3-remote-branch">3. remote branch</h4>
<p>The safe ways to change remote-tracking branches are with git fetch or as a
side-effect of git-push;</p>
<ul>
  <li>You can’t work on remote-tracking branches directly.</li>
  <li>In contrast, you can always switch to local branches and create new commits to
move the tip of the branch forward.</li>
</ul>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://bluecast.tech/blog/git-switch-branch/">switch and checkout</a></li>
  <li><a href="https://longair.net/blog/2009/04/16/git-fetch-and-merge/">fetch and merge</a></li>
  <li><a href="https://jasonrudolph.com/blog/2009/02/25/git-tip-how-to-merge-specific-files-from-another-branch/">Merge specific files from another branch</a></li>
</ol>

:ET