I"Ú
<h4 id="background">Background</h4>
<p>The decorator pattern is a structural pattern that lets you attach additional
functionalities to an object dynamically. In other words, the client has the
freedom to create an object and then extend it by adding a variety of ‚Äúfeatures‚Äù
to it</p>
<ul>
  <li>A good analogy to simplify this pattern is: ‚Äúwrapping a gift, putting it in a
box, and wrapping the box‚Äù</li>
  <li>The decorator pattern is classified among structural design patterns which are
all about class and object composition.</li>
  <li>Structural object-patterns defien ways to compose objects to obtain new
functionality.</li>
</ul>

<h4 id="keywords">Keywords</h4>
<ol>
  <li>
    <p>Flexibility: we want to give to the client the power and flexibility to
dynamically add any feature to a component/object, that could be considered
valuable</p>
  </li>
  <li>
    <p>Extend functionality: the title may be a little bit misleading, this pattern
is not only about ‚Äúdecorating‚Äù a certain object, but it is mainly about
extending its functionality.</p>
  </li>
</ol>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://medium.com/datadriveninvestor/design-patterns-a-quick-guide-to-observer-pattern-d0622145d6c2">Decorator</a></li>
</ol>
:ET