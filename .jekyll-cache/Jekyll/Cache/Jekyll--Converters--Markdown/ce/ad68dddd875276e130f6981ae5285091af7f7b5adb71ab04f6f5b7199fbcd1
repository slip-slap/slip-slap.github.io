I"
<h4 id="problem">Problem</h4>
<ol>
  <li>There are two strings A and B as following:</li>
</ol>

<table>
  <thead>
    <tr>
      <th>b</th>
      <th>d</th>
      <th>\0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>a</th>
      <th>b</th>
      <th>c</th>
      <th>d</th>
      <th>\0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
    </tr>
  </tbody>
</table>

<h4 id="21-recursion-methodtop-down-approach">2.1 Recursion Method(top down approach)</h4>
<ol>
  <li>Code</li>
</ol>

<pre><code class="language-code">int LCS(i,j):
    if(A[i] == '\0' !! B[j] == '\0'):
        return 0;
    else if(A[i] == B[j]):
        return 1 + LCS(i+1, j+1);
    else:
        return max(LCS(i + 1, j), LCS(i, j+1));
</code></pre>

<ol>
  <li>Recursive Tree</li>
</ol>

<p><img src="/images/computer-science-algorithm-problem-lcs.png" /></p>

<ol>
  <li>Recursive Table
|   |   | a | b | c | d | \0  |
|—|—|—|—|—|—|—|
|   |   | 0 | 1 | 2 | 3 | 4 |
| b | 0 | 2 | 2 |   |   |   |
| d | 1 | 1 | 1 | 1 | 1 |   |
| \0  | 2 | 0 | 0 | 0 |   | 0 |</li>
</ol>

<h4 id="22--dynamic-approachbottom-up-approach">2.2  Dynamic Approach(bottom up approach)</h4>

<ol>
  <li>code</li>
</ol>

<pre><code class="language-code">if(A[i] = B[j]):
    LCS[i,j] = 1 + LCS[i-1, j-1]
else:
    LCS[i,j] = max(LCS[i-1, j], LCS[i, j-1])
</code></pre>
<ol>
  <li>bottom up table 
|   |   | a | b | c | d |   |
|—|—|—|—|—|—|—|
|   |   | 0 | 1 | 2 | 3 | 4 |
| b | 0 | 0 | 0 | 0 | 0 | 0 |
| d | 1 | 0 | 0 | 1 | 1 | 1 |
|   | 2 | 0 | 0 | 1 | 1 | 2 |</li>
</ol>

<ul>
  <li>time complexity $\Theta(m \times n)$</li>
</ul>

:ET