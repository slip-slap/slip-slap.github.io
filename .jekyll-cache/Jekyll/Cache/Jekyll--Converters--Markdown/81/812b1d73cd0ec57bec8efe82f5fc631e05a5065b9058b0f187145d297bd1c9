I"ˆ
<p>self-balancing binary search tree.</p>

<h4 id="balance-factor">balance factor</h4>
<ol>
  <li>balance factor = height of left subtree - height of right subtree</li>
  <li>valid factor = hl - hr = {-1, 0, 1}</li>
</ol>

<h4 id="left-rotate">left rotate</h4>
<ol>
  <li>we call it left rotate because the root move to the left.
    <ul>
      <li>the trick, find the target node that want to put operation on</li>
      <li>if the operation is left rotate, than find the right child of the target node.</li>
      <li>if the operation is right rotate, than find the left child of the target node.</li>
    </ul>
  </li>
</ol>

<p><img src="/images/computer-science-abstract-data-type-avl-tree-rotation.png" /></p>

<ul>
  <li>Whatâ€™s the nature of left rotation and right rotation,  Itâ€™s just a constant
number of pointer changs, O(1)</li>
  <li>satisfy BST order property after change.</li>
</ul>
:ET