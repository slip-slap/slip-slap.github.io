I"R<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">class</span> <span class="nc">string</span>
<span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">string</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">string</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"created</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">m_size</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
			<span class="n">m_data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">m_size</span><span class="p">];</span>
			<span class="n">memcpy</span><span class="p">(</span><span class="n">m_data</span><span class="p">,</span><span class="n">string</span><span class="p">,</span><span class="n">m_size</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">string</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"copied</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">m_size</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">m_size</span><span class="p">;</span>
			<span class="n">m_data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">m_size</span><span class="p">];</span>
			<span class="n">memcpy</span><span class="p">(</span><span class="n">m_data</span><span class="p">,</span><span class="n">other</span><span class="p">.</span><span class="n">m_data</span><span class="p">,</span><span class="n">m_size</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">string</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">other</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"moved</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
			<span class="n">m_size</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">m_size</span><span class="p">;</span>
			<span class="n">m_data</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">m_data</span><span class="p">;</span>

			<span class="c1">// move semantics not finished</span>
			<span class="n">other</span><span class="p">.</span><span class="n">m_data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
			<span class="n">other</span><span class="p">.</span><span class="n">m_data</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="o">~</span><span class="n">string</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="k">delete</span> <span class="n">m_data</span><span class="p">;</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"destroyed</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="k">for</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m_size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span><span class="n">m_data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
			<span class="p">}</span>

		<span class="p">}</span>

	<span class="nl">private:</span>
		<span class="kt">char</span><span class="o">*</span> <span class="n">m_data</span><span class="p">;</span>
		<span class="kt">uint32_t</span> <span class="n">m_size</span><span class="p">;</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">entity</span><span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">entity</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">)</span>
			<span class="o">:</span><span class="n">m_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
	    <span class="p">{</span>
		<span class="p">}</span>

		<span class="n">entity</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span>
			<span class="n">m_name</span><span class="p">((</span><span class="n">string</span><span class="o">&amp;&amp;</span><span class="p">)</span><span class="n">name</span><span class="p">)</span>
		<span class="p">{</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">print_name</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">m_name</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
		<span class="p">}</span>

    <span class="nl">private:</span>
		<span class="n">string</span> <span class="n">m_name</span><span class="p">;</span>
		
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
 <span class="n">entity</span> <span class="n">me</span> <span class="o">=</span> <span class="n">entity</span><span class="p">(</span><span class="s">"zhang"</span><span class="p">);</span>
 <span class="n">me</span><span class="p">.</span><span class="n">print_name</span><span class="p">();</span>
 <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

:ET