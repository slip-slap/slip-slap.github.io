I"2I
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
</span>
<span class="kt">int</span> <span class="nf">get_node_height</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">node</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">get_balance_factor</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">node</span><span class="p">);</span>
<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">ll_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">);</span>
<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">lr_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">);</span>
<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">rr_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">);</span>
<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">rl_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">set_tree_balance_factor</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">node</span><span class="p">);</span>

<span class="k">struct</span> <span class="nc">node</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">balance_factor</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">lchild</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">rchild</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">ptr_node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">temp</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;;</span>
		<span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">){</span> <span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">,</span><span class="n">data</span><span class="p">);</span> <span class="p">}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">){</span> <span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">,</span><span class="n">data</span><span class="p">);</span> <span class="p">}</span>

	<span class="n">set_tree_balance_factor</span><span class="p">(</span><span class="n">ptr_node</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">balance_factor</span> <span class="o">==</span> <span class="mi">2</span><span class="o">&amp;&amp;</span> <span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="o">!=</span><span class="nb">nullptr</span> <span class="o">&amp;&amp;</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="o">-&gt;</span><span class="n">balance_factor</span> <span class="o">==</span><span class="mi">1</span><span class="p">)</span> 
	<span class="p">{</span> 
	 <span class="n">ptr_node</span> <span class="o">=</span> <span class="n">ll_rotation</span><span class="p">(</span><span class="n">ptr_node</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="cm">/*
	if(ptr_node-&gt;balance_factor == 2&amp;&amp; ptr_node-&gt;lchild-&gt;balance_factor ==-1){lr_rotation(ptr_node);}
	if(ptr_node-&gt;balance_factor == -2&amp;&amp; ptr_node-&gt;lchild-&gt;balance_factor ==-1){rr_rotation(ptr_node);}
	if(ptr_node-&gt;balance_factor == -2&amp;&amp; ptr_node-&gt;lchild-&gt;balance_factor ==1){rl_rotation(ptr_node);}
	*/</span>
	<span class="k">return</span> <span class="n">ptr_node</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">ll_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node_lchild</span> <span class="o">=</span> <span class="n">unbalance_node</span><span class="o">-&gt;</span><span class="n">lchild</span> <span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node_lchild_rchild</span> <span class="o">=</span> <span class="n">unbalance_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">;</span>

	<span class="n">unbalance_node_lchild</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="o">=</span> <span class="n">unbalance_node</span><span class="p">;</span>
	<span class="n">unbalance_node</span><span class="o">-&gt;</span><span class="n">lchild</span> <span class="o">=</span> <span class="n">unbalance_node_lchild_rchild</span><span class="p">;</span>

    <span class="c1">// update balance factor</span>
	<span class="n">unbalance_node</span><span class="o">-&gt;</span><span class="n">balance_factor</span> <span class="o">=</span> <span class="n">get_node_height</span><span class="p">(</span><span class="n">unbalance_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">)</span>
		  							<span class="o">-</span><span class="n">get_node_height</span><span class="p">(</span><span class="n">unbalance_node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
	<span class="n">unbalance_node_lchild</span><span class="o">-&gt;</span><span class="n">balance_factor</span> <span class="o">=</span> <span class="n">get_node_height</span><span class="p">(</span><span class="n">unbalance_node_lchild</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">)</span> 
										   <span class="o">-</span><span class="n">get_node_height</span><span class="p">(</span><span class="n">unbalance_node_lchild</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>

	<span class="c1">// if unbalance_node is root, update root</span>
	<span class="k">if</span><span class="p">(</span><span class="n">unbalance_node</span> <span class="o">==</span> <span class="n">root</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">root</span> <span class="o">=</span> <span class="n">unbalance_node_lchild</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">unbalance_node_lchild</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pre_order</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">pre_order</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"data "</span><span class="o">&lt;&lt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">&lt;&lt;</span><span class="s">" balance factor: "</span><span class="o">&lt;&lt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">balance_factor</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">pre_order</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">get_node_height</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">lheight</span><span class="o">=</span> <span class="n">get_node_height</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">rheight</span><span class="o">=</span> <span class="n">get_node_height</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">lheight</span><span class="o">&gt;</span><span class="n">rheight</span><span class="o">?</span><span class="n">lheight</span><span class="o">:</span><span class="n">rheight</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">get_balance_factor</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">l_node_height</span> <span class="o">=</span> <span class="n">get_node_height</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">r_node_height</span> <span class="o">=</span> <span class="n">get_node_height</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">l_node_height</span> <span class="o">-</span> <span class="n">r_node_height</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">lr_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">)</span>
<span class="p">{</span>

	<span class="k">return</span> <span class="nb">nullptr</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">rl_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="nb">nullptr</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="nf">rr_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">unbalance_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="nb">nullptr</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">avl_rotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="nb">nullptr</span> <span class="o">||</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">balance_factor</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">){</span><span class="k">return</span><span class="p">;}</span>
	<span class="n">avl_rotation</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
	<span class="n">avl_rotation</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
<span class="p">}</span>



<span class="kt">void</span> <span class="nf">set_tree_balance_factor</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">node</span><span class="o">-&gt;</span><span class="n">balance_factor</span> <span class="o">=</span> <span class="n">get_node_height</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">)</span> <span class="o">-</span><span class="n">get_node_height</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
	<span class="n">set_tree_balance_factor</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
	<span class="n">set_tree_balance_factor</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
	<span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
	<span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
	<span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
	<span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
	<span class="n">pre_order</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"*******************************"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
:ET