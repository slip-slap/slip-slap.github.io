I"ù
<p>####</p>
<ol>
  <li>Data:
    <ul>
      <li>space for storing elements</li>
      <li>top pointer</li>
    </ul>
  </li>
  <li>Operatons
    <ul>
      <li>push(x)</li>
      <li>pop()</li>
      <li>isEmpty()</li>
      <li>isFull()</li>
      <li>stackTop()</li>
      <li>peek()</li>
    </ul>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Stack</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">element</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">isFull</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Stack</span> <span class="n">s</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">isEmpty</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Stack</span> <span class="n">s</span><span class="p">);</span>

<span class="k">struct</span> <span class="nc">Stack</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">top</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="k">struct</span> <span class="nc">Stack</span> <span class="n">stack</span><span class="p">;</span>
    <span class="n">stack</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
    <span class="n">stack</span><span class="p">.</span><span class="n">top</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">stack</span><span class="p">.</span><span class="n">size</span><span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="n">isEmpty</span><span class="p">(</span><span class="n">stack</span><span class="p">);</span>
    <span class="n">isFull</span><span class="p">(</span><span class="n">stack</span><span class="p">);</span>
    <span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">isFull</span><span class="p">(</span><span class="n">stack</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Stack</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">element</span><span class="p">){</span>

    <span class="p">((</span><span class="o">*</span><span class="n">s</span><span class="p">).</span><span class="n">a</span><span class="p">)[(</span><span class="o">*</span><span class="n">s</span><span class="p">).</span><span class="n">top</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">element</span><span class="p">;</span>
    <span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">).</span><span class="n">top</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">).</span><span class="n">top</span> <span class="o">+</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">isFull</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Stack</span> <span class="n">s</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">top</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"stack is full"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"stack is not full"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">isEmpty</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Stack</span> <span class="n">s</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">top</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"stack is empty"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"stack is not empty"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div></div>

:ET