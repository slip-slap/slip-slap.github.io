I"*<ol>
  <li>default constructor</li>
  <li>move constructor</li>
  <li>copy constructor
    <ul>
      <li>a copy constructor is used to initilize a previous uninitilized object from
some other’s object data.</li>
    </ul>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="n">a</span>
<span class="n">A</span> <span class="n">aa</span><span class="o">=</span><span class="n">a</span> <span class="c1">//copy constructor;</span>
</code></pre></div></div>

<ol>
  <li>assignment operator
    <ul>
      <li>An assignment operator is used to replace previous intitilized object with
some other’s object data.</li>
    </ul>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="n">a</span>
<span class="n">A</span> <span class="n">aa</span> 
<span class="n">a</span> <span class="o">=</span> <span class="n">aa</span> <span class="c1">// assign operator</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;ostream&gt;
</span>
<span class="k">class</span> <span class="nc">String</span>
<span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">String</span><span class="p">(){}</span>
		<span class="n">String</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"constructor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">m_length</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
			<span class="n">m_data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">m_length</span><span class="p">];</span>
			<span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">m_data</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">m_length</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="n">String</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"copy constructor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">m_length</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">m_length</span><span class="p">;</span>
			<span class="n">m_data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">m_length</span><span class="p">];</span>
			<span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">m_data</span><span class="p">,</span> <span class="n">str</span><span class="p">.</span><span class="n">m_data</span><span class="p">,</span> <span class="n">m_length</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">String</span><span class="p">(</span><span class="n">String</span><span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="k">noexcept</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"move constructor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">m_length</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">m_length</span><span class="p">;</span>
			<span class="n">m_data</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">m_data</span><span class="p">;</span>
			<span class="n">str</span><span class="p">.</span><span class="n">m_data</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">String</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"assign operator"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">m_length</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">m_length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
			<span class="n">m_data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">m_length</span><span class="p">];</span>
			<span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">m_data</span><span class="p">,</span> <span class="n">str</span><span class="p">.</span><span class="n">m_data</span><span class="p">,</span> <span class="n">m_length</span><span class="p">);</span>
			<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">ostream</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">ostream</span><span class="o">&lt;&lt;</span><span class="s">"string is: "</span><span class="o">&lt;&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">m_data</span><span class="o">&lt;&lt;</span><span class="s">" length is: "</span><span class="o">&lt;&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">m_length</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;;</span>
			<span class="k">return</span> <span class="n">ostream</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="o">~</span><span class="n">String</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"destroy"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="k">delete</span> <span class="n">m_data</span><span class="p">;</span>
		<span class="p">}</span>


	<span class="nl">private:</span>
		<span class="kt">char</span><span class="o">*</span> <span class="n">m_data</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">m_length</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="c1">//int* test_arry ;</span>
	<span class="c1">//test_arry= new int[20];</span>
	<span class="c1">//std::cout&lt;&lt;"the 25th element: "&lt;&lt;test_arry[25000000]&lt;&lt;std::endl;</span>
	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">name</span><span class="o">=</span><span class="s">"zhang huiyao"</span><span class="p">;</span>
	<span class="n">String</span> <span class="n">player1</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
	<span class="n">String</span> <span class="n">player2</span><span class="p">(</span><span class="n">player1</span><span class="p">);</span>
	<span class="n">String</span> <span class="n">player3</span> <span class="o">=</span> <span class="n">player2</span><span class="p">;</span> <span class="c1">// copy constructor</span>
	<span class="n">player3</span> <span class="o">=</span> <span class="n">player2</span><span class="p">;</span><span class="c1">// assign operator</span>
	<span class="n">String</span> <span class="n">player4</span><span class="p">((</span><span class="n">String</span> <span class="o">&amp;&amp;</span><span class="p">)</span><span class="n">String</span><span class="p">(</span><span class="s">"liam"</span><span class="p">));</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">player1</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">player2</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">player3</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">player4</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div>
:ET