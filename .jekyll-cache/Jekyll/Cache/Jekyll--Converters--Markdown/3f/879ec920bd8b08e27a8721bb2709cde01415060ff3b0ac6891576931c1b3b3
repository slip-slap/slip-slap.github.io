I"m
<ol>
  <li>reverseing: reverse element or reverse link.</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
</span><span class="k">struct</span> <span class="nc">node</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">key</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_next</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">head</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">,</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">temp</span><span class="p">;</span> 
	<span class="p">}</span>
	<span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">ptr_node</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">){</span><span class="k">return</span><span class="p">;}</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">key</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">display</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">reverse</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span> <span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">q</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">q</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">){</span><span class="n">head</span><span class="o">=</span><span class="n">p</span><span class="p">;</span><span class="n">q</span><span class="o">=</span><span class="n">p</span><span class="p">;</span><span class="k">return</span><span class="p">;}</span>
	<span class="n">reverse</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">);</span>
	<span class="n">q</span><span class="o">-&gt;</span><span class="n">ptr_next</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">head</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
	<span class="n">head</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
	<span class="n">head</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
	<span class="n">display</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
	<span class="n">reverse</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">,</span><span class="n">head</span><span class="p">);</span>
	<span class="n">display</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="galois">Galois</h4>
<ol>
  <li>We can use the relationship function between T(n) and T(n-1), for example,
T(n)=T(n-1)+1;</li>
  <li>In the link list context, the relationship can be expressed in a different
way, but in nature, they are the same.
    <ul>
      <li>T(n).Element = T(n-1).Element</li>
    </ul>
  </li>
  <li>Itâ€™s very beautiful.</li>
</ol>

:ET