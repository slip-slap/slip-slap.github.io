I"Œ2
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">struct</span> <span class="nc">node</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">leftChild</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">rightChild</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">parent</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span><span class="kt">int</span>  <span class="n">data</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">getNodeHeight</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">getBalanceFactor</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">rightRotation</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
    <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">9</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">11</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span>
    <span class="n">display</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">getNodeHeight</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"node height is "</span><span class="o">&lt;&lt;</span><span class="n">height</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">balancefactor</span> <span class="o">=</span> <span class="n">getBalanceFactor</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"node balance factoris "</span><span class="o">&lt;&lt;</span><span class="n">balancefactor</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

<span class="p">}</span>

<span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">root</span><span class="p">,</span><span class="kt">int</span>  <span class="n">data</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">){</span>
        <span class="c1">// check the left child of current node  is nullptr or not;</span>
        <span class="c1">// if it is not nullptr</span>
        <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">leftChild</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
        <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">leftChild</span> <span class="o">=</span>  <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
        <span class="n">leftChild</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
        <span class="n">root</span><span class="o">-&gt;</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">leftChild</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">){</span>
        <span class="c1">// check the left child of current node  is nullptr or not;</span>
        <span class="c1">// if it is not nullptr</span>
        <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="o">!=</span> <span class="nb">nullptr</span><span class="p">){</span>
        <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">rightChild</span><span class="o">=</span>  <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
        <span class="n">rightChild</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
        <span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="o">=</span> <span class="n">rightChild</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">node</span><span class="p">){</span>
         <span class="k">if</span><span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">){</span>
             <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"visit leaf node"</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
             <span class="k">return</span><span class="p">;</span>
         <span class="p">}</span><span class="k">else</span><span class="p">{</span>

             <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="n">display</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">);</span>
         <span class="n">display</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="n">y</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">getNodeHeight</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">node</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">){</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">lh</span><span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">getNodeHeight</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">);</span>  
    <span class="kt">int</span> <span class="n">rh</span><span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">getNodeHeight</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">);</span>  
    <span class="k">return</span> <span class="n">max</span><span class="p">(</span><span class="n">lh</span><span class="p">,</span> <span class="n">rh</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">getBalanceFactor</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">root</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">left_subtree_height</span> <span class="o">=</span> <span class="n">getNodeHeight</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">right_subtree_height</span> <span class="o">=</span> <span class="n">getNodeHeight</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">left_subtree_height</span> <span class="o">-</span> <span class="n">right_subtree_height</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

:ET