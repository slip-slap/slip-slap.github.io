I"T3
<p>####</p>
<ol>
  <li>why data is modified by private ? function is modified by public?
    <ul>
      <li>just like a car, it has button you can push, the button is like a function,
it’s public.</li>
      <li>But what’s in the button, you have no idea. It’s the data which is private.</li>
    </ul>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;algorithm&gt; // std::copy
#include &lt;cstddef&gt; // std::size_t
#include &lt;iostream&gt;
</span><span class="k">class</span> <span class="nc">String</span><span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">String</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">char_arr</span><span class="p">);</span>
		<span class="n">String</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">);</span>
		<span class="n">String</span><span class="p">(</span><span class="n">String</span><span class="o">&amp;&amp;</span> <span class="n">other</span><span class="p">);</span>

		<span class="o">~</span><span class="n">String</span><span class="p">();</span>

		<span class="c1">// it is a member function</span>
		<span class="n">String</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">String</span> <span class="n">other</span><span class="p">);</span>
		<span class="n">String</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">);</span>

		<span class="k">friend</span> <span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="n">String</span><span class="o">&amp;</span> <span class="n">fst</span><span class="p">,</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">sec</span><span class="p">);</span>
		<span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">);</span>

	<span class="nl">private:</span>
		<span class="n">std</span><span class="o">::</span><span class="kt">size_t</span> <span class="n">m_Size</span><span class="p">;</span>
		<span class="kt">char</span><span class="o">*</span> <span class="n">m_Array</span><span class="p">;</span>

<span class="p">};</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">char</span><span class="o">*</span> <span class="n">liam</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
	<span class="kt">char</span><span class="o">*</span> <span class="n">joana</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
	<span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">liam</span><span class="p">,</span><span class="s">"liam"</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">joana</span><span class="p">,</span><span class="s">"joana"</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
	<span class="c1">//for(int i=0;i&lt;5;i++){std::cout&lt;&lt;liam[i];}</span>
	<span class="n">String</span> <span class="n">name1</span><span class="p">(</span><span class="n">liam</span><span class="p">);</span>
	<span class="n">String</span> <span class="n">name2</span><span class="p">(</span><span class="n">joana</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">name1</span><span class="o">+</span><span class="n">name2</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">String</span><span class="o">::</span><span class="n">String</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">char_arr</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">m_Size</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strlen</span><span class="p">(</span><span class="n">char_arr</span><span class="p">)</span> <span class="o">+</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">m_Array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">m_Size</span><span class="p">];</span>
	<span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">m_Array</span><span class="p">,</span> <span class="n">char_arr</span><span class="p">,</span> <span class="n">m_Size</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"construstor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">String</span><span class="o">::</span><span class="n">String</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">m_Array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">other</span><span class="p">.</span><span class="n">m_Size</span><span class="p">];</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"copy construstor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">m_Array</span><span class="p">,</span> <span class="n">other</span><span class="p">.</span><span class="n">m_Array</span><span class="o">+</span><span class="n">m_Size</span><span class="p">,</span> <span class="n">m_Array</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">String</span><span class="o">::</span><span class="n">String</span><span class="p">(</span><span class="n">String</span><span class="o">&amp;&amp;</span> <span class="n">other</span><span class="p">){</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"move semantics"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">String</span><span class="o">::~</span><span class="n">String</span><span class="p">(){</span>
			<span class="k">delete</span><span class="p">[]</span> <span class="n">m_Array</span><span class="p">;</span>
		<span class="p">}</span>
<span class="n">String</span><span class="o">&amp;</span> <span class="n">String</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">String</span> <span class="n">other</span><span class="p">){</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"assignment operator"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">swap</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span> <span class="n">other</span><span class="p">);</span>
	<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">String</span><span class="o">&amp;</span> <span class="n">String</span><span class="o">::</span><span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">){</span>
	<span class="n">m_Size</span><span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">m_Size</span> <span class="o">+</span> <span class="n">m_Size</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">m_Array</span><span class="p">,</span> <span class="n">other</span><span class="p">.</span><span class="n">m_Array</span><span class="o">+</span><span class="n">other</span><span class="p">.</span><span class="n">m_Size</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">m_Array</span><span class="o">+</span><span class="mi">4</span><span class="p">);</span>
	<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">){</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">other</span><span class="p">.</span><span class="n">m_Array</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="n">String</span><span class="o">&amp;</span> <span class="n">fst</span><span class="p">,</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">sec</span><span class="p">){</span>
		<span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">fst</span><span class="p">.</span><span class="n">m_Size</span><span class="p">,</span> <span class="n">sec</span><span class="p">.</span><span class="n">m_Size</span><span class="p">);</span>
		<span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">fst</span><span class="p">.</span><span class="n">m_Array</span><span class="p">,</span> <span class="n">sec</span><span class="p">.</span><span class="n">m_Array</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="galois">Galois</h4>
<ol>
  <li>Static class members are treated almost exactly like global variables/functions. Because they are
not tied to an instance.
    <ul>
      <li>There is nothing to discuss regarding memory layout.</li>
    </ul>
  </li>
  <li>Class member variables are duplicated for each instance as you can imagine, as each instance can
have its own unique value for every member variable.</li>
  <li>Class member functions only exist once in a code segment in memory. At a low level, they are just
like normal global functions but they receive a pointer to this. With Visual studio on x86, it’s
via ecx register using thiscall calling convention.</li>
</ol>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://stackoverflow.com/questions/3106110/what-is-move-semantics#:~:text=Move%20semantics%20is%20about%20transferring,code%20uses%20the%20value%20again.">Move semantics</a></li>
  <li><a href="https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom">copy and swap idiom</a></li>
</ol>

:ET