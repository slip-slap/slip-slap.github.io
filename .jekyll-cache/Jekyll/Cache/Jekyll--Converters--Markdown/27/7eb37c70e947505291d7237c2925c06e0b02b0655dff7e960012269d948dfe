I"i#
<h4 id="random-module">random module</h4>
<p>This module is consists of two components, they are <br /></p>
<ol>
  <li>simple random data</li>
  <li>Distributions, such as uniform distribution, normal distribution,poisson distribution etc.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="common-function">common function</h4>

<h5 id="npwhere">np.where()</h5>
<ol>
  <li>The input argument of this API is bool value</li>
  <li>the return is the index whose bool value is true</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example 1
</span><span class="n">result</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">([</span><span class="bp">False</span><span class="p">,</span>  <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span><span class="bp">True</span><span class="p">])</span>
<span class="c1"># the value of the result
# (array([1, 2, 4]),)
# Example 2
</span><span class="n">fitness</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">fitness</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">fitness</span><span class="p">))</span>
<span class="c1"># the value of the result is the position of the maximization value
# (array([5]),)
</span></code></pre></div></div>

<h5 id="numpy中的与dot">numpy中的*与dot</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span>   <span class="c1">#元素逐个计算 c为[[1, 4],[2, 12]]
</span><span class="n">d</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1">#矩阵的乘法
</span></code></pre></div></div>

<h5 id="linalg">linalg</h5>
<ul>
  <li>Core Linear Algebra Tools</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">matrix</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span>
<span class="n">eigenvalues</span><span class="p">,</span><span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">eig</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</code></pre></div></div>

<h5 id="random-seed">random seed</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="c1"># array([0.96702984, 0.54723225, 0.97268436])
</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="c1">#array([0.71481599, 0.69772882, 0.2160895 ])
</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="c1"># array([0.96702984, 0.54723225, 0.97268436])
</span></code></pre></div></div>

<h5 id="the-axis-in-python-module">the axis in python module</h5>

<p>look at the following code</p>

<p><strong>arr=np.arange(12).reshape(2,3,2)</strong></p>

<ol>
  <li>when execute sum operation along axis=0, which means the variable is <strong>the first value of the array’s shape</strong></li>
  <li>so are <em>*2</em>3*</li>
</ol>

<pre><code class="language-python3">import numpy as np

arr=np.arange(12).reshape(2,3,2)
"""
array([[[ 0,  1],
        [ 2,  3],
        [ 4,  5]],

       [[ 6,  7],
        [ 8,  9],
        [10, 11]]])

"""
np.sum(arr,axis=0)

"""
array([[ 6,  8],
       [10, 12],
       [14, 16]])
because the sum operates along the axis which equals zero, so we set the starting value to be zero.
and along the axis,the possible values are 0,1 

000-&gt;100  001-&gt;101
010-&gt;110  011-&gt;111
020-&gt;120  021-&gt;121
"""

np.sum(arr, axis=1)

"""
array([[ 6,  9],
       [24, 27]])

along the axis which equals one, the possible value are 0,1,2

000-&gt;010-&gt;020  100-&gt;110-&gt;120
001-&gt;011-&gt;021  101-&gt;111-&gt;121
"""
########################################################################
arr2 = np.arange(12).reshape(3,4)

# the axis has the same meaning just as np.sum() operation
np.insert(arr2,0,0,axis=0)

</code></pre>

<h5 id="the-relationship-between-numpy-arrays-and-matrix">the relationship between numpy arrays and matrix</h5>

<ol>
  <li>Matrix objects are a subclass of numpy ndarrays, so they inherit all the attributes and methods</li>
  <li>Matrices are strictly 2-dimensional, Numpy arrays are N-dimensional</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<h5 id="numpy-shuffle">numpy shuffle</h5>

<pre><code class="language-python3">a = np.arange(24).reshape(4,6)
np.random.shuffle(a)
a[0:2,:]
</code></pre>

<h5 id="function-argsort">function argsort()</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> 
<span class="c1"># result is [1,2,0]
</span></code></pre></div></div>

:ET