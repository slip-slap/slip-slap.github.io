I">
<h3 id="1-llvm-project-clang">1 LLVM Project clang</h3>
<ol>
  <li>clang is the C compiler</li>
  <li>Clang++ is the C++ compiler
    <ul>
      <li>-std=<dialect>: option picks which dialect of a particular language you want
to use. if you need to ensure that you program is portable to an old C++98
compiler, you can compile it with -std=c++98</dialect></li>
    </ul>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang++ <span class="nt">-std</span><span class="o">=</span>c++11 my_class.cpp
clang++ <span class="si">$(</span>pkg-config <span class="nt">--cflags</span> <span class="nt">--libs</span> /usr/local/Cellar/opencv/4.3.0_4/lib/pkgconfig/opencv4.pc<span class="si">)</span> <span class="nt">-std</span><span class="o">=</span>c++14 smooth.cpp
</code></pre></div></div>
<h4 id="stage-selection-options">Stage Selection Options</h4>
<ol>
  <li>-E     Run the preprocessor stage.</li>
  <li>-S</li>
  <li>-c</li>
</ol>

<h4 id="assemble-code-generation">Assemble Code Generation</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// default output test.s</span>
<span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">S</span> <span class="o">-</span><span class="n">mllvm</span> <span class="o">--</span><span class="n">x86</span><span class="o">-</span><span class="k">asm</span><span class="o">-</span><span class="n">syntax</span><span class="o">=</span><span class="n">intel</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span>
</code></pre></div></div>
<h4 id="machine-code-generation-without-linked">Machine Code Generation without Linked</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">c</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span> <span class="c1">// default output test.o</span>
</code></pre></div></div>

<h4 id="rvoreturn-value-optimization">RVO(Return Value Optimization)</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">fno</span><span class="o">-</span><span class="n">elide</span><span class="o">-</span><span class="n">constructors</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span>
</code></pre></div></div>

<h4 id="compilationg-process">Compilationg Process</h4>
<p><img src="/images/gcc-compilation-process.png" /></p>

:ET