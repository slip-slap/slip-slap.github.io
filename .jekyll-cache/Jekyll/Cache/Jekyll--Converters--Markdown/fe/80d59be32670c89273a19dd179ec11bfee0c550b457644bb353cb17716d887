I"
<h4 id="1-definition">1. Definition</h4>
<p>A linker is a computer program that takes one or more object files generated by
a compiler and combines them into one, executable program.</p>

<p><img src="/images/pl-compiler-c++-linker.png" width="300" height="200" /></p>

<ol>
  <li>Linking has nothing to do with C or C++ specifically: compilers just generate the object files.
the linker then takes them as input without ever knowing what language compiled them. It might as
well be Fortran.</li>
</ol>

<h4 id="2-error">2. Error</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
</span><span class="kt">void</span> <span class="nf">my_tool</span><span class="p">();</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">my_tool</span><span class="p">();</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"hello world!"</span><span class="p">;</span>
<span class="p">}</span>


</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Undefined symbols for architecture x86_64:
  "my_tool()", referenced from:
      _main in work-3e80d8.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
</code></pre></div></div>

<h4 id="3-static-library-and-dynamic-library">3. Static library and dynamic library</h4>
<ol>
  <li>static library means this file will go into your executable file.</li>
  <li>Dynamic means link the library on the fly.
    <ul>
      <li>this is just the package in python, or java.</li>
      <li>Each C++ libary provides two files, the includes for compiler.</li>
      <li>The library for the linker.</li>
      <li>Why c++ doesnâ€™t  have a package manager, because developers donâ€™t buy this.</li>
    </ul>
  </li>
</ol>

<h4 id="4-the-linker-search-path">4. The linker search path</h4>

<ol>
  <li>In speak of searching path, the system environment variables comes into my mind.
    <ul>
      <li>such as path.</li>
    </ul>
  </li>
  <li>The second option that comes into my mind is maybe not the linker related
environment variable.</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">man</span> <span class="n">ld</span>
<span class="cm">/* the output is:
ld maintains a list of directories to search for a library or framework to use.
The default library search path is /usr/lib then /usr/local/lib.  The -L option
will add a new library search path.  The default framework search path is
/Library/Frameworks then /System/Library/Frameworks.  (Note: previously,
/Network/Library/Frameworks was at the end of the default path.  If you need
that functionality, you need to explicitly add -F/Network/Library/Frameworks).
The -F option will add a new framework search path.  The -Z option will remove
the standard search paths.  The -syslibroot option will prepend a prefix to all
search paths
*/</span>
</code></pre></div></div>

<p>Second method</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ld <span class="nt">-v</span> 2
/<span class="k">*</span> the output is: 
//@<span class="o">(</span><span class="c">#)PROGRAM:ld  PROJECT:ld64-450.3</span>
BUILD 23:30:59 Feb  5 2020
configured to support archs: i386 x86_64 x86_64h armv6 armv7 armv7s armv7m armv7k arm64
Library search paths:
        /usr/lib
        /usr/local/lib
Framework search paths:
        /Library/Frameworks/
        /System/Library/Frameworks/
ld: file not found: 2
<span class="k">*</span>/
</code></pre></div></div>

:ET