I"•%
<h4 id="complete-binary-tree">Complete Binary Tree</h4>
<ol>
  <li>how to identify a tree is complete binary tree, you can make use of the array
representation</li>
</ol>

<h4 id="drawback">Drawback</h4>
<ol>
  <li>The height of the binary search depends on the order of insertion.</li>
  <li>You canâ€™t control the insertion order.</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
</span><span class="k">struct</span> <span class="nc">node</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">lchild</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">rchild</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">root</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">ptr_node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">){</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">,</span><span class="n">data</span><span class="p">);}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">){</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">,</span><span class="n">data</span><span class="p">);}</span>
	<span class="k">return</span> <span class="n">ptr_node</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="nf">search</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">){</span><span class="k">return</span> <span class="nb">nullptr</span><span class="p">;}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">==</span><span class="n">data</span><span class="p">){</span><span class="k">return</span> <span class="n">ptr_node</span><span class="p">;}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">&gt;</span><span class="n">data</span><span class="p">){</span><span class="n">ptr_node</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">,</span><span class="n">data</span><span class="p">);}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">&lt;</span><span class="n">data</span><span class="p">){</span><span class="n">ptr_node</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">,</span><span class="n">data</span><span class="p">);}</span>
	<span class="k">return</span> <span class="n">ptr_node</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pre_order</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">){</span><span class="k">return</span><span class="p">;}</span>
	<span class="n">pre_order</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"data is "</span><span class="o">&lt;&lt;</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;;</span>
	<span class="n">pre_order</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">30</span><span class="p">);</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">40</span><span class="p">);</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">25</span><span class="p">);</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">35</span><span class="p">);</span>
	<span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="mi">50</span><span class="p">);</span>
	<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">41</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">result</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"target not found"</span><span class="p">;}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">result</span><span class="o">!=</span><span class="nb">nullptr</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"target found"</span><span class="o">&lt;&lt;</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;}</span>

<span class="p">}</span>

</code></pre></div></div>

<h4 id="galois">Galois</h4>
<ol>
  <li>We go to university to get degree, we learn staff from youtube.</li>
</ol>

:ET