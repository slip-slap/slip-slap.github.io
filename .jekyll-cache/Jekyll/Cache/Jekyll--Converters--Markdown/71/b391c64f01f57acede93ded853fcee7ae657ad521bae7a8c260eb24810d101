I"ˆ
<p>####</p>
<ol>
  <li>representation is implemented by the compiler.</li>
  <li>operations on their data is not given by the compiler.</li>
</ol>

<h4 id="array-adt">Array ADT</h4>
<ol>
  <li>Data
    <ul>
      <li>Array Space</li>
      <li>size</li>
      <li>length</li>
    </ul>
  </li>
  <li>Operations
    <ul>
      <li>display()</li>
      <li>add(x)</li>
      <li>insert(index, x)</li>
      <li>search(x)</li>
    </ul>
  </li>
</ol>

<h4 id="galois">Galois</h4>
<ol>
  <li>computer are not born with array, they are gift provided by the compiler.
Donâ€™t take anything for granted.</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include &lt;iostream&gt;
</span>
<span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Array</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="kt">int</span> <span class="n">element</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Array</span> <span class="o">*</span><span class="n">a</span><span class="p">);</span>

<span class="k">struct</span> <span class="nc">Array</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="k">struct</span> <span class="nc">Array</span> <span class="n">array</span><span class="p">;</span>
    <span class="n">array</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
    <span class="n">array</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">array</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">display</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">insert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    <span class="n">display</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Array</span> <span class="o">*</span><span class="n">a</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">length</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">Array</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="kt">int</span> <span class="n">element</span><span class="p">){</span>
    <span class="c1">// append the element  </span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">length</span><span class="p">;</span>
    <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">a</span><span class="p">[</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="n">element</span><span class="p">;</span>
    <span class="c1">// move forward</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>

        <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// update length</span>
    <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">).</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

:ET