I"K
<h4 id="class文件的组织结构">class文件的组织结构</h4>
<p>.class文件是由子节组成的文件，又叫字节码文件</p>
<hr />

<h5 id="魔数">魔数</h5>
<p>由java编译器编译而成的class文件的前四个字节都是“OxCAFEBABE”
作用，即JVM在尝试加载某个文件到内存中的时候，会首先判断此class文件有没有JVM认为可以接受的”签名”，即JVM会首先读取文件的前四个字节，判断这四个字节是否是”0xCAFEBABE”,如果是则JVM会认为可以将此冷箭当作class文件来加载使用</p>
<hr />

<h5 id="版本号">版本号</h5>

<h4 id="垃圾回收机制">垃圾回收机制</h4>
<hr />

<h5 id="垃圾回收算法">垃圾回收算法</h5>
<ol>
  <li>标记-清除算法，首先标记出所有需要回收的对象，然后回收所有需要回收的对象，该算法缺点是内存块回收之后不连续，导致下一次想分配大内存而无法分配。</li>
  <li>标记-清除-压缩 该方法对上述方法进行优化，缺点是不停的内存间的拷贝和复制，性能较差。</li>
  <li>标记-清除-复制 该算法事先分配两块相同的区域A和B，将A中存活对的复制到B，再将A清空。</li>
</ol>
<hr />

<p><img src="/my_pics/java/jvm/memory-model.jpeg" width="450" height="300" /></p>
<h4 id="java分代收集算法">Java分代收集算法</h4>
<p>Java主要将内存划分为两部分:新生代和老生代</p>
<ol>
  <li>新生代中，对象存活率低，存活期间较短，使用复制算法进行垃圾回收</li>
  <li>老生代中，存活率较高，采用标记-清除-压缩算法进行垃圾回收。
    <h4 id="垃圾回收器">垃圾回收器</h4>
  </li>
</ol>
<hr />

<p>MinorGC: 从年轻空间(包括Eden和Survivor区域)回收内存称为Minor GC <br /></p>
<ol>
  <li>当JVM无法为一个新对象分配空间时会触发Minor GC,比如当Eden区满了，所以分配率越高，越频繁执行Minor GC</li>
  <li>本质上来说，我们并不关心是Minor GC，Major GC还是Full GC，只需要关心GC是否停止了所用应用程序的线程</li>
</ol>
:ET