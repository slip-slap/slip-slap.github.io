I"›
<h4 id="feature-selection-with-genetic-algorithm">Feature Selection with Genetic Algorithm</h4>
<p>From customer segmentation to medical diagnosis, arise from complex relationship between features.</p>

<h4 id="train-neural-network-with-genetic-algorithm">Train Neural Network with Genetic Algorithm</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># prepare data
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">train_x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">64000</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">):</span>
            <span class="n">train_x</span><span class="p">[</span><span class="n">index</span><span class="p">,:]</span><span class="o">=</span><span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">z</span><span class="p">[</span><span class="n">k</span><span class="p">],</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>  
<span class="n">target</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span><span class="n">train_x</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">target</span><span class="p">)):</span>
    <span class="n">train_x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">target</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>


<span class="c1"># create the network with tensorflow
</span><span class="n">input_x</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"input_x"</span><span class="p">)</span>
<span class="n">input_y</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"input_y"</span><span class="p">)</span>
<span class="c1"># this placeholder is for inject weights
</span><span class="n">hidden_inject_weights</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"hidden_inject_weights"</span><span class="p">)</span>
<span class="n">hidden_inject_biases</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"hidden_inject_biases"</span><span class="p">)</span>
<span class="n">output_inject_weights</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"output_inject_weights"</span><span class="p">)</span>
<span class="n">output_inject_biases</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"output_inject_biases"</span><span class="p">)</span>

<span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="n">variable_scope</span><span class="p">(</span><span class="n">name_or_scope</span><span class="o">=</span><span class="s">"hidden"</span><span class="p">,</span><span class="n">reuse</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">AUTO_REUSE</span><span class="p">):</span>
        <span class="n">w1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">get_variable</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"weights"</span><span class="p">,</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span><span class="n">initializer</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">contrib</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">xavier_initializer</span><span class="p">())</span>
        <span class="n">b1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">get_variable</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"bias"</span><span class="p">,</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="n">initializer</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">constant_initializer</span><span class="p">(</span><span class="mf">0.0</span><span class="p">))</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">input_x</span><span class="p">,</span><span class="n">w1</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"matmul"</span><span class="p">)</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">bias_add</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span><span class="n">b1</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"bias_add"</span><span class="p">)</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">sigmoid</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"activation"</span><span class="p">)</span>
        
        <span class="n">assign_w1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">w1</span><span class="p">,</span><span class="n">hidden_inject_weights</span><span class="p">)</span>
        <span class="n">assign_b1</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">b1</span><span class="p">,</span><span class="n">hidden_inject_biases</span><span class="p">)</span>
        
<span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="n">variable_scope</span><span class="p">(</span><span class="n">name_or_scope</span><span class="o">=</span><span class="s">"output"</span><span class="p">,</span><span class="n">reuse</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">AUTO_REUSE</span><span class="p">):</span>
        <span class="n">w2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">get_variable</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"weights"</span><span class="p">,</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">initializer</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">contrib</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">xavier_initializer</span><span class="p">())</span>
        <span class="n">b2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">get_variable</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"bias"</span><span class="p">,</span><span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">initializer</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">constant_initializer</span><span class="p">(</span><span class="mf">0.0</span><span class="p">))</span>
        <span class="n">x2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span><span class="n">w2</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"matmul"</span><span class="p">)</span>
        <span class="n">x2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">bias_add</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">b2</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"bias_add"</span><span class="p">)</span>
        <span class="n">y_</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">sigmoid</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">"activation"</span><span class="p">)</span>
        
        <span class="n">assign_w2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">w2</span><span class="p">,</span><span class="n">output_inject_weights</span><span class="p">)</span>
        <span class="n">assign_b2</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">b2</span><span class="p">,</span><span class="n">output_inject_biases</span><span class="p">)</span>

<span class="n">loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">reduce_sum</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">square</span><span class="p">(</span><span class="n">input_y</span><span class="o">-</span><span class="n">y_</span><span class="p">))</span>
<span class="n">init</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">global_variables_initializer</span><span class="p">()</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">train</span><span class="p">.</span><span class="n">GradientDescentOptimizer</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">optimizer</span><span class="p">.</span><span class="n">minimize</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>

<span class="c1"># define genetic algorithm
# genetic algorithm
</span><span class="k">def</span> <span class="nf">select_mating_pool</span><span class="p">(</span><span class="n">pop</span><span class="p">,</span> <span class="n">fitness</span><span class="p">,</span> <span class="n">num_parents</span><span class="p">):</span>
    <span class="c1"># Selecting the best individuals in the current generation as parents for producing the offspring of the next generation.
</span>    <span class="n">parents</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">((</span><span class="n">num_parents</span><span class="p">,</span> <span class="n">pop</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
    <span class="k">for</span> <span class="n">parent_num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_parents</span><span class="p">):</span>
        <span class="c1"># return data type is tuple
</span>        <span class="n">max_fitness_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">fitness</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">fitness</span><span class="p">))</span>
        <span class="n">max_fitness_idx</span> <span class="o">=</span> <span class="n">max_fitness_idx</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">parents</span><span class="p">[</span><span class="n">parent_num</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">pop</span><span class="p">[</span><span class="n">max_fitness_idx</span><span class="p">,</span> <span class="p">:]</span>
        <span class="n">fitness</span><span class="p">[</span><span class="n">max_fitness_idx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">99999999999</span>
    <span class="k">return</span> <span class="n">parents</span>

<span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parents</span><span class="p">,</span> <span class="n">offspring_size</span><span class="p">):</span>
    <span class="n">offspring</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">(</span><span class="n">offspring_size</span><span class="p">)</span>
    <span class="c1"># The point at which crossover takes place between two parents. Usually, it is at the center.
</span>    <span class="n">crossover_point</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">(</span><span class="n">offspring_size</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">offspring_size</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="c1"># Index of the first parent to mate.
</span>        <span class="n">parent1_idx</span> <span class="o">=</span> <span class="n">k</span><span class="o">%</span><span class="n">parents</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="c1"># Index of the second parent to mate.
</span>        <span class="n">parent2_idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">parents</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="c1"># The new offspring will have its first half of its genes taken from the first parent.
</span>        <span class="n">offspring</span><span class="p">[</span><span class="n">k</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="n">crossover_point</span><span class="p">]</span> <span class="o">=</span> <span class="n">parents</span><span class="p">[</span><span class="n">parent1_idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="n">crossover_point</span><span class="p">]</span>
        <span class="c1"># The new offspring will have its second half of its genes taken from the second parent.
</span>        <span class="n">offspring</span><span class="p">[</span><span class="n">k</span><span class="p">,</span> <span class="n">crossover_point</span><span class="p">:]</span> <span class="o">=</span> <span class="n">parents</span><span class="p">[</span><span class="n">parent2_idx</span><span class="p">,</span> <span class="n">crossover_point</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">offspring</span>
<span class="k">def</span> <span class="nf">mutation</span><span class="p">(</span><span class="n">offspring_crossover</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">offspring_crossover</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="c1"># The random value to be added to the gene.
</span>        <span class="n">weight_max</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="n">weight_min</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span>
        <span class="n">mutation_constant</span> <span class="o">=</span> <span class="mf">0.8</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">offspring_crossover</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">20</span>                                    
            <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">offspring_crossover</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="n">offspring_crossover</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">pos</span><span class="p">]</span><span class="o">+</span><span class="n">mutation_constant</span><span class="o">*</span><span class="p">(</span><span class="n">weight_max</span><span class="o">-</span><span class="n">offspring_crossover</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">pos</span><span class="p">])</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">offspring_crossover</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="n">offspring_crossover</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">pos</span><span class="p">]</span><span class="o">-</span><span class="n">mutation_constant</span><span class="o">*</span><span class="p">(</span><span class="n">offspring_crossover</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">pos</span><span class="p">]</span><span class="o">-</span><span class="n">weight_min</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">offspring_crossover</span>
<span class="k">def</span> <span class="nf">get_individual_fitness</span><span class="p">(</span><span class="n">individual</span><span class="p">):</span>
    <span class="s">"""
    call the neural network to calculate the fitness
    """</span>
    <span class="n">nn_weights</span> <span class="o">=</span> <span class="n">chrome2nn_weights</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
    <span class="c1"># assign the weights to neural network
</span>    <span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">([</span><span class="n">assign_w1</span><span class="p">,</span><span class="n">assign_b1</span><span class="p">,</span><span class="n">assign_w2</span><span class="p">,</span><span class="n">assign_b2</span><span class="p">],</span>
         <span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="n">hidden_inject_weights</span><span class="p">:</span><span class="n">nn_weights</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">hidden_inject_biases</span><span class="p">:</span><span class="n">nn_weights</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
                    <span class="n">output_inject_weights</span><span class="p">:</span><span class="n">nn_weights</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">output_inject_biases</span><span class="p">:</span><span class="n">nn_weights</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
                   <span class="p">}</span>
        <span class="p">)</span>
    <span class="c1"># use the train data to get the fitness which is the loss of the neural network
</span>    <span class="n">data_x</span> <span class="o">=</span> <span class="n">train_x</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1000</span><span class="p">][:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
    <span class="n">data_y</span> <span class="o">=</span> <span class="n">train_x</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1000</span><span class="p">][:,</span><span class="mi">3</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">global</span> <span class="n">loss</span>
    <span class="n">fitness</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">loss</span><span class="p">,</span><span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="n">input_x</span><span class="p">:</span><span class="n">data_x</span><span class="p">,</span><span class="n">input_y</span><span class="p">:</span><span class="n">data_y</span><span class="p">})</span>
    <span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="n">fitness</span>
<span class="k">def</span> <span class="nf">get_population_fitness</span><span class="p">(</span><span class="n">population</span><span class="p">):</span>
    <span class="n">fitness</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">population</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">individual_fitness</span> <span class="o">=</span> <span class="n">get_individual_fitness</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">,:])</span>
        <span class="n">fitness</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">individual_fitness</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fitness</span>
<span class="k">def</span> <span class="nf">nn_weights2chrome</span><span class="p">(</span><span class="n">nn_weights</span><span class="p">):</span>
    <span class="n">chrome</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>
    <span class="n">chrome</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">nn_weights</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">nn_weights</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">nn_weights</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">4</span><span class="p">))).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">chrome</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="n">nn_weights</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">chrome</span>
<span class="k">def</span> <span class="nf">chrome2nn_weights</span><span class="p">(</span><span class="n">chrome</span><span class="p">):</span>
    <span class="n">nn_weights</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">nn_weights</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">chrome</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">12</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
    <span class="n">nn_weights</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">chrome</span><span class="p">[</span><span class="mi">12</span><span class="p">:</span><span class="mi">16</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
    <span class="n">nn_weights</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">chrome</span><span class="p">[</span><span class="mi">16</span><span class="p">:</span><span class="mi">20</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">nn_weights</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">chrome</span><span class="p">[</span><span class="mi">20</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">nn_weights</span>

<span class="c1"># begin learning
</span><span class="n">BEST_OUTPUTS</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">pop_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span><span class="mi">21</span><span class="p">)</span>
<span class="c1">#parent_population = np.random.random(pop_size)
</span><span class="n">parent_population</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">pop_size</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">sess</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
    <span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">init</span><span class="p">)</span>
    <span class="n">weights</span> <span class="o">=</span> <span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">get_collection</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">GraphKeys</span><span class="p">.</span><span class="n">TRAINABLE_VARIABLES</span><span class="p">))</span>
    <span class="n">sess</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">chrome</span> <span class="o">=</span> <span class="n">nn_weights2chrome</span><span class="p">(</span><span class="n">weights</span><span class="p">)</span>
    <span class="n">parent_population</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">chrome</span><span class="p">)</span>
<span class="n">parent_population</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">parent_population</span><span class="p">)</span>

<span class="n">ELITIST_PERCENT</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">POPULATION</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">CHROME_LENGHT</span> <span class="o">=</span> <span class="mi">21</span>
<span class="c1"># create a session
</span><span class="n">sess</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
<span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">init</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
    <span class="n">fitness</span> <span class="o">=</span> <span class="n">get_population_fitness</span><span class="p">(</span><span class="n">parent_population</span><span class="p">)</span>
    <span class="n">BEST_OUTPUTS</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">fitness</span><span class="p">))</span>
    <span class="n">parents</span> <span class="o">=</span> <span class="n">select_mating_pool</span><span class="p">(</span><span class="n">parent_population</span><span class="p">,</span> <span class="n">fitness</span><span class="p">,</span>
                                      <span class="nb">int</span><span class="p">(</span><span class="n">ELITIST_PERCENT</span><span class="o">*</span><span class="n">POPULATION</span><span class="p">))</span>
    <span class="n">offspring_crossover</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parents</span><span class="p">,</span>
                                       <span class="n">offspring_size</span><span class="o">=</span><span class="p">(</span><span class="n">pop_size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">parents</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">CHROME_LENGHT</span><span class="p">))</span>
    <span class="n">offspring_mutation</span> <span class="o">=</span> <span class="n">mutation</span><span class="p">(</span><span class="n">offspring_crossover</span><span class="p">)</span>
    <span class="n">parent_population</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">parents</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">parents</span>
    <span class="n">parent_population</span><span class="p">[</span><span class="n">parents</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]:,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">offspring_mutation</span>

<span class="n">matplotlib</span><span class="p">.</span><span class="n">pyplot</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">BEST_OUTPUTS</span><span class="p">)</span>
<span class="n">matplotlib</span><span class="p">.</span><span class="n">pyplot</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Number of Generations"</span><span class="p">)</span>
<span class="n">matplotlib</span><span class="p">.</span><span class="n">pyplot</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"Fitness"</span><span class="p">)</span>
<span class="n">matplotlib</span><span class="p">.</span><span class="n">pyplot</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Genetic Algorithm and Neural Network"</span><span class="p">)</span>

</code></pre></div></div>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://www.neuraldesigner.com/blog/genetic_algorithms_for_feature_selection">Genetic Algorithm for Feature Selection</a></li>
</ol>
:ET