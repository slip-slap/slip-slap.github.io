I"$<ul id="markdown-toc">
  <li><a href="#简介" id="markdown-toc-简介">简介</a></li>
  <li><a href="#属性" id="markdown-toc-属性">属性</a>    <ul>
      <li><a href="#pom属性" id="markdown-toc-pom属性">POM属性</a></li>
      <li><a href="#java系统属性" id="markdown-toc-java系统属性">Java系统属性</a></li>
      <li><a href="#自定义属性" id="markdown-toc-自定义属性">自定义属性</a></li>
    </ul>
  </li>
  <li><a href="#目录结构" id="markdown-toc-目录结构">目录结构</a></li>
  <li><a href="#生命周期" id="markdown-toc-生命周期">生命周期</a>    <ul>
      <li><a href="#clean-清理项目" id="markdown-toc-clean-清理项目">clean 清理项目</a></li>
      <li><a href="#default-构建项目" id="markdown-toc-default-构建项目">default 构建项目</a></li>
      <li><a href="#site-生成项目站点" id="markdown-toc-site-生成项目站点">site 生成项目站点</a></li>
    </ul>
  </li>
  <li><a href="#配置" id="markdown-toc-配置">配置</a>    <ul>
      <li><a href="#修改远程仓库" id="markdown-toc-修改远程仓库">修改远程仓库</a></li>
    </ul>
  </li>
  <li><a href="#使用" id="markdown-toc-使用">使用</a></li>
</ul>

<h3 id="简介">简介</h3>
<p><a href="http://maven.apache.org/pom.html">官网</a>和cmake一样，maven也用来构建项目。<br />
maven有个仓库的概念，怎么理解这个概念呢。顶级域名有com, org等。顶级域名具有不可重复性，因此可以用来作为包名。google,alibaba会把自己开发的一些框架贡献给开源社区。</p>
<hr />

<h3 id="属性">属性</h3>
<hr />

<h4 id="pom属性">POM属性</h4>
<ul>
  <li>{basedir} 表示项目更目录</li>
  <li>{version} 表示项目版本
    <ol>
      <li>${project.build.directory} 表示主源码路径，默认为target</li>
      <li>${project.build.outputDirectory} 构建过程输出目录，默认为target/classes</li>
      <li>${project.build.sourceEncoding}表示主源码的编码格式</li>
      <li>${project.build.sourceDirectory}表示主源码路径</li>
      <li>{project.build.finalName} 表示输出文件名称</li>
      <li>${project.packageing} 打包类型，默认为jar</li>
      <li>${project.version}表示项目版本</li>
    </ol>
  </li>
</ul>
<hr />

<h4 id="java系统属性">Java系统属性</h4>
<ul>
  <li>所有的Java系统属性都可以使用Maven属性引用,${user.home}</li>
  <li>mvn help:system可查看所有Java系统属性</li>
  <li>System.getProperties() 可得到所有Java属性</li>
</ul>
<hr />

<h4 id="自定义属性">自定义属性</h4>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project&gt;</span>
	<span class="nt">&lt;properties&gt;</span>
		<span class="nt">&lt;spring.version&gt;</span>4.3.8.RELEASE<span class="nt">&lt;/spring.version&gt;</span>
		<span class="c">&lt;!-- 设置file-encoding--&gt;</span>
	    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
	<span class="nt">&lt;/properties&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>
<p>在其它地方使用${spring.version}</p>
<hr />

<h3 id="目录结构">目录结构</h3>
<p>maven约定的目录结构</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src
  main
     java
	 resource
  test
  	 java 
	 resource
target
pom.xml
</code></pre></div></div>
<hr />

<h3 id="生命周期">生命周期</h3>
<p>各个周期相互独立，后面的周期依赖前面的周期</p>
<h4 id="clean-清理项目">clean 清理项目</h4>
<ol>
  <li>pre-clean 执行清理前的工作</li>
  <li>clean 清理上一次构建生成的所有文件</li>
  <li>post-clean 执行清理后的文件</li>
</ol>
<hr />

<h4 id="default-构建项目">default 构建项目</h4>
<ol>
  <li>compile</li>
  <li>test</li>
  <li>package</li>
  <li>install</li>
</ol>
<hr />

<h4 id="site-生成项目站点">site 生成项目站点</h4>
<ol>
  <li>pre-site 在生成项目站点前要完成的工作</li>
  <li>site 生成项目的站点文档</li>
  <li>post-site 在生成项目站点后要完成的工作</li>
  <li>site-deploy 发布生成的站点到服务器上</li>
</ol>
<hr />

<h3 id="配置">配置</h3>
<p>像vim,tmux一样，maven也有自己的配置文件，${MAVEN_HOME}/conf下的settings.xml文件</p>
<h4 id="修改远程仓库">修改远程仓库</h4>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mirrors&gt;</span>
    <span class="nt">&lt;mirror&gt;</span>
		<span class="nt">&lt;id&gt;</span>nexus-aliyun<span class="nt">&lt;/id&gt;</span>
		<span class="nt">&lt;mirrorOf&gt;</span>*<span class="nt">&lt;/mirrorOf&gt;</span>
		<span class="nt">&lt;name&gt;</span>Nexus aliyun<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;url&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="nt">&lt;/url&gt;</span>
	<span class="nt">&lt;/mirror&gt;</span>
<span class="nt">&lt;mirrors&gt;</span>
</code></pre></div></div>
<hr />

<h3 id="使用">使用</h3>
<ol>
  <li><a href="http://mvnrepository.com/">maven仓库</a>寻找jar包</li>
  <li>
    <font color="red">选择版本号</font>
  </li>
  <li>配置依赖
阿里贡献了fastjson,号称世界上最快的解析器.在maven中的配置代码如下<br />
```xml</li>
</ol>
<dependency>
	<gourpId>com.alibaba&lt;/groupId&gt;
	<artifactId>fastjson</artifactId>
	<version>1.1.36</version>
&lt;/dependency&gt;
<!--json解析器常见的有fastjson，jackson和json-lib
	其中json-lib解析器的包导入比较特别，需要注意
-->
<dependency>
      <groupId>net.sf.json-lib</groupId>
      <artifactId>json-lib</artifactId>
      <version>2.4</version>
      <classifier>jdk15</classifier>
</dependency>

```
<hr />
#### plugin
<hr />
##### archetype:generate
```shell
mvn archetype:generate -DarchetypeArtifactId=maven-archetype-webapp     //web目录
mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart //创建经典目录
```
<hr />
#### assembly

<hr />
参考链接<br />
[maven assembly plugin](http://maven.apache.org/plugins/maven-assembly-plugin/index.html)
[maven pom文件](https://maven.apache.org/pom.html#POM_Relationships)
</gourpId></dependency>
:ET