I"Š-
<p>The following code is a what a perfect class should look like, which includes
constructor, copy constructor, assignment operator, move semantics, destructor.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;vector&gt;
</span>
<span class="k">class</span> <span class="nc">String</span>
<span class="p">{</span>
	<span class="nl">public:</span>
		<span class="n">String</span><span class="p">(){};</span>
		<span class="n">String</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">length</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"constructor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">m_char</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">length</span><span class="p">];</span>
			<span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">str</span><span class="o">+</span><span class="n">length</span><span class="p">,</span> <span class="n">m_char</span><span class="p">);</span>
			<span class="n">m_length</span> <span class="o">=</span> <span class="n">length</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">String</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">another</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"copy constructor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">m_char</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">another</span><span class="p">.</span><span class="n">m_length</span><span class="p">];</span>
			<span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">another</span><span class="p">.</span><span class="n">m_char</span><span class="p">,</span> <span class="n">another</span><span class="p">.</span><span class="n">m_char</span><span class="o">+</span><span class="n">another</span><span class="p">.</span><span class="n">m_length</span><span class="p">,</span> <span class="n">m_char</span><span class="p">);</span>
			<span class="n">m_length</span> <span class="o">=</span> <span class="n">another</span><span class="p">.</span><span class="n">m_length</span><span class="p">;;</span>
		<span class="p">}</span>

		<span class="n">String</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">String</span> <span class="n">another</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"assignment operator"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">swap</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span> <span class="n">another</span><span class="p">);</span>
			<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="n">String</span><span class="p">(</span><span class="n">String</span><span class="o">&amp;&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="k">noexcept</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"move operator"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">swap</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">,</span><span class="n">other</span><span class="p">);</span>
		<span class="p">}</span>


		<span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">obj</span><span class="p">.</span><span class="n">m_char</span><span class="p">;</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="k">return</span> <span class="n">out</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">friend</span> <span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="n">String</span><span class="o">&amp;</span> <span class="n">first</span><span class="p">,</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">second</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">m_char</span><span class="p">,</span> <span class="n">second</span><span class="p">.</span><span class="n">m_char</span><span class="p">);</span>
			<span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">m_length</span><span class="p">,</span> <span class="n">second</span><span class="p">.</span><span class="n">m_length</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="o">~</span><span class="n">String</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"destructor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="nl">private:</span>
		<span class="kt">char</span><span class="o">*</span> <span class="n">m_char</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">m_length</span><span class="p">;</span>

<span class="p">};</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="sc">'l'</span><span class="p">,</span><span class="sc">'i'</span><span class="p">,</span><span class="sc">'a'</span><span class="p">,</span><span class="sc">'m'</span><span class="p">,</span><span class="sc">'\0'</span><span class="p">};</span>
	<span class="n">String</span> <span class="n">a</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">str_vec</span><span class="p">;</span>
	<span class="n">str_vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
	<span class="n">str_vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"size before move: "</span><span class="o">&lt;&lt;</span><span class="n">str_vec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">str_vec</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"size after move: "</span><span class="o">&lt;&lt;</span><span class="n">str_vec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"size after move: "</span><span class="o">&lt;&lt;</span><span class="n">c</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="galois">Galois</h4>
<ol>
  <li>Static class members are treated almost exactly like global variables/functions. Because they are
not tied to an instance.
    <ul>
      <li>There is nothing to discuss regarding memory layout.</li>
    </ul>
  </li>
  <li>Class member variables are duplicated for each instance as you can imagine, as each instance can
have its own unique value for every member variable.</li>
  <li>Class member functions only exist once in a code segment in memory. At a low level, they are just
like normal global functions but they receive a pointer to this. With Visual studio on x86, itâ€™s
via ecx register using thiscall calling convention.</li>
</ol>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://stackoverflow.com/questions/3106110/what-is-move-semantics#:~:text=Move%20semantics%20is%20about%20transferring,code%20uses%20the%20value%20again.">Move semantics</a></li>
  <li><a href="https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom">copy and swap idiom</a></li>
  <li><a href="https://www.programiz.com/cpp-programming/friend-function-class">friend keyword</a></li>
</ol>

:ET