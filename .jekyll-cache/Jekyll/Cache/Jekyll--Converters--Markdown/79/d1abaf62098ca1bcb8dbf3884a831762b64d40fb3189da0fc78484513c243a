I"b
<h4 id="vector-deque-and-array">Vector, Deque and Array</h4>
<ol>
  <li>Vector work exactly like array, just as we use list in python, you should use
vector in C++;</li>
  <li>Deque: double ended queue, implemened by array, support subscript operator.</li>
</ol>

<h4 id="subscript-operator-reload">subscript operator reload</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;
#include &lt;ostream&gt;
</span><span class="k">class</span> <span class="nc">Complex</span>
<span class="p">{</span>
	<span class="nl">public:</span>
	<span class="n">Complex</span><span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span><span class="n">real_part</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="n">virtual_part</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"constructor"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">float</span> <span class="n">GetComplexRealPart</span><span class="p">()</span> <span class="k">const</span> 
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">real_part</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="nl">private:</span>
		<span class="kt">float</span> <span class="n">real_part</span><span class="p">;</span>
		<span class="kt">float</span> <span class="n">virtual_part</span><span class="p">;</span>
<span class="p">};</span>
<span class="err">}</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="n">Complex</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">Complex</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">GetComplexRealPart</span><span class="p">()</span><span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">GetComplexRealPart</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Complex</span><span class="o">&gt;</span> <span class="n">d_vector</span><span class="p">;</span>
	<span class="n">d_vector</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Complex</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span>
	<span class="n">d_vector</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Complex</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"before sorted"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">print_vector</span><span class="p">(</span><span class="n">d_vector</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">d_vector</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">d_vector</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">compare</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"after sorted"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">print_vector</span><span class="p">(</span><span class="n">d_vector</span><span class="p">);</span>
	<span class="c1">//std::vector&lt;double&gt;::iterator it = std::find(d_vector.begin(), d_vector.end(),2.58);</span>
	<span class="c1">//std::cout&lt;&lt;*it&lt;&lt;std::endl;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="algorithm">Algorithm</h4>

<ol>
  <li>Move semantics
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">B</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>insert: check the <em>cppreference</em>, which explain this function well.</li>
</ol>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://stackoverflow.com/questions/12613428/stl-vector-moving-all-elements-of-a-vector">moving vector</a></li>
  <li><a href="https://en.cppreference.com/w/cpp/container/vector/insert">vector insert</a></li>
</ol>

:ET