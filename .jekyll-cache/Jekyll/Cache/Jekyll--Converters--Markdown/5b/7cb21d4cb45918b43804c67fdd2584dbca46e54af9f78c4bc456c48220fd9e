I"

<h4 id="rule">Rule</h4>
<ol>
  <li>If you apply address in heap, you must return</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
#include &lt;memory&gt;
</span>
<span class="k">class</span> <span class="nc">student</span>
<span class="p">{</span>
	<span class="nl">private:</span>
		<span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>

	<span class="nl">public:</span>
		<span class="n">student</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"create"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="o">~</span><span class="n">student</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"destroy"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
		<span class="p">}</span>
<span class="p">};</span>



<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">student</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">student</span><span class="p">();</span><span class="c1">// will not call ~student even the program end.</span>
	<span class="n">student</span> <span class="n">b</span><span class="p">;</span> <span class="c1">//student will be called</span>
	<span class="c1">//std::unique_ptr&lt;student&gt; b(new student());</span>
<span class="p">}</span>


</code></pre></div></div>

<h4 id="i">I</h4>
<ol>
  <li>New allocate memory in heap</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;memory&gt;
</span>

<span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="nf">new</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"allocating "</span><span class="o">&lt;&lt;</span><span class="n">size</span><span class="o">&lt;&lt;</span> <span class="s">" bytes"</span><span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="k">operator</span> <span class="k">delete</span><span class="p">[]</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">memory</span><span class="p">)</span> <span class="k">noexcept</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"int freeing "</span><span class="o">&lt;&lt;</span> <span class="s">" bytes"</span><span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">free</span><span class="p">(</span><span class="n">memory</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="k">operator</span> <span class="k">delete</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">memory</span><span class="p">)</span> <span class="k">noexcept</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"object freeing "</span><span class="o">&lt;&lt;</span> <span class="s">" bytes"</span><span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">free</span><span class="p">(</span><span class="n">memory</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">student</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="nc">student</span> <span class="o">*</span> <span class="n">zhang</span> <span class="o">=</span> <span class="k">new</span> <span class="k">struct</span> <span class="nc">student</span><span class="p">;</span>
    <span class="n">zhang</span><span class="o">-&gt;</span><span class="n">age</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="n">zhang</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">"zhangsan"</span><span class="p">;</span>

    <span class="k">delete</span> <span class="n">zhang</span><span class="p">;</span>

    <span class="kt">int</span><span class="o">*</span> <span class="n">age</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
    <span class="k">delete</span><span class="p">[]</span> <span class="n">age</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="galois">Galois</h4>
<ol>
  <li>When keyword new is used, the return value is always <strong>address</strong>;</li>
</ol>

<h4 id="reference">reference</h4>
<ol>
  <li><a href="https://en.cppreference.com/w/cpp/memory/new/operator_delete">cpp rererence</a></li>
</ol>
:ET