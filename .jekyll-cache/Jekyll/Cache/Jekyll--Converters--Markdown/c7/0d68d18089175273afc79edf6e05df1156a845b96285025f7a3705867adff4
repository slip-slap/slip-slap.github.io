I"S#
<h5 id="基于数组和链表的map实现">基于数组和链表的map实现</h5>
<ol>
  <li>数组用来存放哈希表</li>
  <li>链表用来存放key</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
</span>
<span class="k">struct</span> <span class="nc">node</span> 
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">next_node</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">hashing</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="n">number</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">&amp;</span> <span class="n">customer</span><span class="p">,</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">hash_chaining</span><span class="p">[])</span>
<span class="p">{</span>
	 <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">hashing</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="n">number</span><span class="p">);</span>
	 <span class="k">if</span><span class="p">(</span><span class="n">hash_chaining</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">)</span>
	 <span class="p">{</span>
		<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span>  <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">number</span> <span class="o">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">number</span><span class="p">;</span>
		<span class="n">hash_chaining</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
	 <span class="p">}</span><span class="k">else</span>
	 <span class="p">{</span>
		 <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">head</span><span class="o">=</span> <span class="n">hash_chaining</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>

		 <span class="k">while</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next_node</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span>
		 <span class="p">{</span>
			 <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next_node</span><span class="p">;</span>
		 <span class="p">}</span>
		<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span>  <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">number</span> <span class="o">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">number</span><span class="p">;</span>
		<span class="n">head</span><span class="o">-&gt;</span><span class="n">next_node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
     <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">search</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">,</span> <span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">hash_chaining</span><span class="p">[])</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">hashing</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">head</span> <span class="o">=</span> <span class="n">hash_chaining</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>

	<span class="k">while</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">number</span> <span class="o">!=</span> <span class="n">number</span> <span class="o">&amp;&amp;</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next_node</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next_node</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">if</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">number</span> <span class="o">==</span> <span class="n">number</span><span class="p">)</span>
	<span class="p">{</span>
    	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">name</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;;</span>
	<span class="p">}</span><span class="k">else</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"customer number not found"</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>	
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
     <span class="k">struct</span> <span class="nc">node</span><span class="o">*</span>  <span class="n">hash_chaining</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nb">nullptr</span><span class="p">};</span>
	 <span class="k">struct</span> <span class="nc">node</span> <span class="n">customer1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">198</span><span class="p">,</span><span class="s">"Liam"</span><span class="p">};</span>
	 <span class="k">struct</span> <span class="nc">node</span> <span class="n">customer2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">24</span><span class="p">,</span><span class="s">"Jason"</span><span class="p">};</span>
	 <span class="k">struct</span> <span class="nc">node</span> <span class="n">customer3</span> <span class="o">=</span> <span class="p">{</span><span class="mi">36</span><span class="p">,</span><span class="s">"Henry"</span><span class="p">};</span>
	 <span class="n">insert</span><span class="p">(</span><span class="n">customer1</span><span class="p">,</span><span class="n">hash_chaining</span><span class="p">);</span>
	 <span class="n">insert</span><span class="p">(</span><span class="n">customer2</span><span class="p">,</span><span class="n">hash_chaining</span><span class="p">);</span>
	 <span class="n">insert</span><span class="p">(</span><span class="n">customer3</span><span class="p">,</span><span class="n">hash_chaining</span><span class="p">);</span>
	 <span class="n">search</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="n">hash_chaining</span><span class="p">);</span>
	 <span class="n">search</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span><span class="n">hash_chaining</span><span class="p">);</span>

 <span class="p">}</span>

</code></pre></div></div>
:ET