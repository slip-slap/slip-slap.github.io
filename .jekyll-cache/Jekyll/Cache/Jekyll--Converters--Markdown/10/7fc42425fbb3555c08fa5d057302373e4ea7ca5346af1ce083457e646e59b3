I"4
<h4 id="1-syntax-and-semantics">1. Syntax and Semantics</h4>
<ol>
  <li>Syntax: describes the proper form of its programs</li>
  <li>Semantics: defines what its programs mean</li>
</ol>

<h4 id="2-production">2. Production</h4>
<p>$
\text {stmt} \rightarrow \text { if ( expr ) stmt else stmt }
$</p>
<ol>
  <li>The arrow may be read as “can have the form.” Such a rule is called a production</li>
</ol>

<h4 id="a">A</h4>
<ol>
  <li>Three-address code: which consists of a sequence of assembly-like instructions with three
operands per instruction. Each operand can act like a register.
    <ul>
      <li>Each three-address assignment instruction has at most one operator on the right side</li>
      <li>The compiler must generate a temporarty name to hold the value computed by a three-address
instruction.</li>
    </ul>
  </li>
</ol>

<h4 id="names-identifiers-and-variables">Names, Identifiers, and Variables</h4>
<ol>
  <li>An identifier is a string of characters, typically letters or digits, such as a data object, a
procedure, a class, or a type</li>
  <li>Names: All identifiers are names, but not all names are identifiers. Names can also be
expressions.
    <ul>
      <li>The name $x.y$ might denote the field y of a structure denoted by x, here, x and y are
identifiers, which $x.y$ is a name.</li>
    </ul>
  </li>
  <li>Variable: a variable refers to a particular location of the store.</li>
</ol>

<h4 id="3-procedures-functions-and-methods">3. Procedures, Functions, and Methods</h4>
<h4 id="4-declarations-and-definitions">4. Declarations and Definitions</h4>

:ET