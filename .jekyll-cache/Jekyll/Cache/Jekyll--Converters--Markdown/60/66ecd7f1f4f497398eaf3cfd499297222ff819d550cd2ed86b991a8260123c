I"—
<h4 id="1-pointer-operation">1. Pointer Operation</h4>
<ol>
  <li>p++</li>
  <li>pâ€“</li>
  <li>p+1</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">};</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">p</span><span class="o">++&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;*</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="problems-using-pointers">Problems Using Pointers</h4>
<ol>
  <li>uninitialized ptr.</li>
  <li>memory leak.</li>
  <li>dangling pointer.</li>
</ol>

<h4 id="2-void-pointer">2. Void Pointer</h4>
<p>A void pointer is a pointer that has no associated data type with it.</p>
<ul>
  <li>a void pointer can hold address of any data type can be typecasted to any type.</li>
  <li>malloc() and calloc() return void* type and this allows these functions to be used to allocate
memory of any data type.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include&lt;iostream&gt;
#include&lt;vector&gt;
</span>
<span class="kt">void</span> <span class="nf">print_value</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">){</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"print value is "</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">container_iterator</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">my_vector</span><span class="p">,</span> <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)){</span>
	<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">element</span><span class="o">:</span> <span class="n">my_vector</span><span class="p">){</span>
		<span class="n">func</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>
	<span class="n">container_iterator</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">print_value</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="char-and-char">Char* and char[]</h4>
<ol>
  <li>Char* and char[] are different types</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">message</span><span class="p">[]</span><span class="o">=</span><span class="s">"hello world!"</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>defines an array whose memeter lives in current scopeâ€™s stack space</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span><span class="o">*</span> <span class="n">messag</span><span class="o">=</span><span class="s">"hello world!"</span><span class="p">;</span> <span class="c1">// not allowed</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">messag</span><span class="o">=</span><span class="s">"hello world!"</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>defines a pointer that lives in current scopeâ€™s stack space.</li>
  <li>but that reference memory is someelse where.</li>
  <li>Because the data is not stored in the current scopeâ€™s stack space, itâ€™s
unspecified where it will be stored and should not be modified.</li>
</ul>

<h4 id="galois">Galois</h4>
<p>I want to make function pointer void(func*) make sense.</p>
<ul>
  <li>integer pointer int* p</li>
  <li>void pointer void*</li>
  <li>void funtion pointer void(func*)(std::string a)</li>
</ul>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://stackoverflow.com/questions/1335786/c-differences-between-char-pointer-and-array">char pointer and array</a></li>
</ol>

:ET