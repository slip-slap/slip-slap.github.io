I"
<h4 id="1-create-a-repository">1. Create a repository</h4>

<h5 id="11-git-init">1.1 git init</h5>
<h5 id="12-git-clone">1.2 git clone</h5>
<p>This command is git clone and not “checkout”. This is an important
distinction-instead of getting just a working copy, Git receives a full copy of
nearly all data that the server has.</p>
<ul>
  <li>Every version of every file for the history of the project is pulled down by
default when you run git clone</li>
</ul>

<h4 id="13-lifecycle-of-the-status-of-your-files">1.3 Lifecycle of the status of your files</h4>
<p>checking the status of your files</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div>

<p><img align="left" src="/images/os-software-git-basic-file-lifecycle.png" /> <br /></p>

<h4 id="14-tracking-new-files">1.4 tracking new files</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add new-file
</code></pre></div></div>

<h4 id="15-ignoring-files">1.5 Ignoring Files</h4>
<p>Often, you’ll have a class of files that you don’t want Git to automatically add
or even show you as being untracked.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> .gitignore
<span class="k">*</span>.[oa]
<span class="k">*</span>~
</code></pre></div></div>
<ul>
  <li>the first line tells Git to ignore any files ending in “.o” or “.a”</li>
  <li>the second line tells git to ignore all files whose names end with a tilde(~)</li>
</ul>

<h4 id="16-git-diff">1.6 git diff</h4>
<p>The git status is too vague for you, you want to know exactly what you changed,
not just which files were changed. you can use git diff.</p>
<ul>
  <li>git diff shows you the exact lines added and removed-the patch</li>
</ul>

<h3 id="2-undoing-things">2. Undoing Things</h3>

<h4 id="21-undoing-of-a-commit">2.1 Undoing of a commit</h4>
<p>One of the common undos takes place when you commit too early and possibly
forget to add some files, or you mess up your commit message. If you want to
redo that commit, make the additional changes you forgot, stage them, and commit
again using the –amend option</p>
<ul>
  <li>When you’re amending your last commit, you’re not so much fixing it as
replacing it entirely with a new, improved commit that pushes the old commit
out of the way and puts the new commit in its place.</li>
  <li>Effectivelly, it’s as if the previous commit never happened, and it won’t show
up in your repository history.</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s1">'Initial commit'</span>
git add forgotten_file
git commit <span class="nt">--amend</span>
</code></pre></div></div>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://stackoverflow.com/questions/2529441/how-to-read-the-output-from-git-diff">How to read the outputs of git diff</a></li>
</ol>
:ET