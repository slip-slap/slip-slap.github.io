I"l8
<h4 id="a">A</h4>
<ol>
  <li>we use array to implement heap data structure.</li>
</ol>

<h4 id="code">Code</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
#include&lt;cmath&gt;
</span>
<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
	<span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
	<span class="n">a</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">heap</span><span class="p">[],</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// find last position</span>
	<span class="kt">int</span> <span class="n">last_pos</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">heap</span><span class="p">[</span><span class="n">last_pos</span><span class="p">]</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="n">last_pos</span><span class="o">++</span><span class="p">;}</span>
	<span class="n">heap</span><span class="p">[</span><span class="n">last_pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>

	<span class="c1">//adjust heap</span>
	<span class="c1">// position relation</span>
	<span class="c1">// for position i. left child 2*i+1 right child 2*i+2</span>
	<span class="c1">//                 parent position (i-1)/2</span>
	
	<span class="kt">int</span> <span class="n">parent_pos</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">floor</span><span class="p">((</span><span class="n">last_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
	<span class="k">while</span><span class="p">(</span><span class="n">parent_pos</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="n">heap</span><span class="p">[</span><span class="n">last_pos</span><span class="p">]</span><span class="o">&gt;</span><span class="n">heap</span><span class="p">[</span><span class="n">parent_pos</span><span class="p">])</span>
		<span class="p">{</span>
			<span class="n">swap</span><span class="p">(</span><span class="n">heap</span><span class="p">[</span><span class="n">last_pos</span><span class="p">],</span><span class="n">heap</span><span class="p">[</span><span class="n">parent_pos</span><span class="p">]);</span>
			<span class="n">last_pos</span> <span class="o">=</span> <span class="n">parent_pos</span><span class="p">;</span>
			<span class="n">parent_pos</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">floor</span><span class="p">((</span><span class="n">last_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
		<span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">break</span><span class="p">;}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">create</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span><span class="kt">int</span> <span class="n">heap</span><span class="p">[])</span>
<span class="p">{</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">insert</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
	<span class="p">}</span>

<span class="p">}</span>

<span class="kt">void</span> <span class="nf">remove</span><span class="p">(</span><span class="kt">int</span> <span class="n">heap</span><span class="p">[],</span><span class="kt">int</span> <span class="n">last_element_position</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">current_pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">current_pos</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">last_element_position</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">current_pos</span><span class="o">+</span><span class="mi">2</span><span class="o">&lt;=</span><span class="n">last_element_position</span><span class="o">&amp;&amp;</span><span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span>
		<span class="p">{</span>
			<span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
			<span class="n">current_pos</span> <span class="o">=</span> <span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">current_pos</span><span class="o">+</span><span class="mi">2</span><span class="o">&lt;=</span><span class="n">last_element_position</span><span class="o">&amp;&amp;</span><span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;</span><span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span>
		<span class="p">{</span>
			<span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
			<span class="n">current_pos</span> <span class="o">=</span> <span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">current_pos</span><span class="o">+</span><span class="mi">2</span><span class="o">&gt;</span><span class="n">last_element_position</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">heap</span><span class="p">[</span><span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
			<span class="n">current_pos</span> <span class="o">=</span> <span class="n">current_pos</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">heap</span><span class="p">[</span><span class="n">last_element_position</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">heap</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
	<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">};</span>
	<span class="n">create</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="n">heap</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">heap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">remove</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span><span class="mi">9</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">heap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ol>
  <li>Trashed Code
```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cmath></cmath></string></vector></iostream></li>
</ol>

<p>class max_heap
{
	private:
		int heap_array[15] = {0};
		int pointer= 0;
	public:
		void insert(int priority)
		{
			if(pointer &lt; 15)
			{
				heap_array[pointer] = priority; 
			}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		int parent_pos = int(std::floor((pointer+1)/2)) ;
		int child_pos = pointer+1;
		while(parent_pos &gt;= 1)
		{
			if(heap_array[parent_pos-1]&lt;heap_array[child_pos-1])
			{
				int temp = heap_array[parent_pos-1];
				heap_array[parent_pos-1] = heap_array[child_pos-1];
				heap_array[child_pos-1] = temp;
			}
			if(parent_pos == 1){
				break;
			}
			parent_pos = int(std::floor((parent_pos)/2)) ;
			child_pos= int(std::floor((child_pos)/2)) ;
		}
		pointer++;
	}

	void display(){
		for(int i=0;i&lt;15;i++)
		{
			std::cout&lt;&lt;heap_array[i]&lt;&lt;" ";
		}
	} };
</code></pre></div></div>

<p>int main()
{</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>max_heap my_heap;
my_heap.insert(5);
my_heap.insert(10);
my_heap.insert(8);
my_heap.insert(9);
my_heap.insert(1);
my_heap.insert(20);
my_heap.display();
</code></pre></div></div>

<p>}
```</p>
:ET