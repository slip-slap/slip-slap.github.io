I"«
<p>####</p>
<ol>
  <li>why we call this boy dynamic programming,
    <ul>
      <li>Dynamic why, why ? just a fancy terminology, it sounded cool.</li>
      <li>Programming means optimization in America.</li>
      <li>DP is ‚Äúcareful brute force‚Äù</li>
      <li>Dp is guessing + recursion + momoization</li>
    </ul>
  </li>
</ol>

<p>topological sort of subproblem dependency DAG.</p>

<ol>
  <li>define subproblems: is the most difficult part, need some insight.
    <ul>
      <li>rule of thumb</li>
      <li>suffixes $x[i:]$: topological order is always right to left, decreasing i</li>
      <li>prefixes $x[:i]$: topologican order is always left to right, increasing i</li>
      <li>substrings: increase substring</li>
    </ul>
  </li>
  <li>guess:
    <ul>
      <li><strong>what to guess</strong>, maybe the most important problem, with some
practice, you can get it.</li>
    </ul>
  </li>
  <li>recurrence</li>
  <li>recurrence + momoize</li>
  <li>solve original problem
    <ul>
      <li>parent pointer</li>
    </ul>
  </li>
</ol>

<h4 id="application">Application</h4>
<ol>
  <li>naive</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">f</span>
</code></pre></div></div>

<ol>
  <li>Memoized DP Algorithm
    <ul>
      <li>fib(k) only recurses the first time it is called</li>
      <li>memoized calls cost O(1)</li>
      <li>nonmemoized calls is n: fib(1), fib(2), ‚Ä¶ ,fib(n)</li>
    </ul>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">def</span> <span class="nf">memo_fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">memo_fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">memo_fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span>
    <span class="k">return</span> <span class="n">f</span>
</code></pre></div></div>

<ol>
  <li>Bottom-up DP Algorithm</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bottom_up_fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">fib</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">k</span><span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">f</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">f</span> <span class="o">=</span> <span class="n">fib</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">fib</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
        <span class="n">fib</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span>
    <span class="k">return</span> <span class="n">fib</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>  
</code></pre></div></div>

<h4 id="application-1">Application</h4>

<h5 id="shortest-path-problem">Shortest Path Problem</h5>
<h5 id="text-justification">Text Justification</h5>
<ol>
  <li>Microsoft Word: greedy</li>
  <li>Latex: badness = $(\text{page width - total width})^3$</li>
</ol>

<h5 id="parenthesization">Parenthesization</h5>
<h5 id="edit-distance">Edit Distance</h5>
<h5 id="knapsack">Knapsack</h5>

:ET