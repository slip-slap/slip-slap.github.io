I"[!
<h4 id="galois">Galois</h4>
<ol>
  <li>Stochastic Process is a collection of random variables indexed by time, this
is the formal definition of stochastic process</li>
  <li>Given the $DP(\alpha, H(0))$, a point is generate from this thing, and this
point itself is a random variable, so we call this thing $DP(\alpha, H(0))$ 
Dirichlet Process. Because it meet the definition of a process.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">norm</span>

<span class="k">def</span> <span class="nf">simulation_dirichilet</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span><span class="n">sampling_number</span><span class="p">):</span>
    
    <span class="c1"># initial interval [1]
</span>    <span class="n">initial_interval</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">first_sample</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="n">rvs</span><span class="p">()</span>
    <span class="n">corresponding_distinct_sample</span><span class="o">=</span> <span class="p">[</span><span class="n">first_sample</span><span class="p">]</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="p">[</span><span class="n">first_sample</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sampling_number</span><span class="p">):</span>
        <span class="c1">#generate random number x ~ U[0,1]
</span>        <span class="n">uniform_sample</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">initial_interval</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">uniform_sample</span> <span class="o">&lt;</span> <span class="n">initial_interval</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">dirichilet_sample</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="n">rvs</span><span class="p">()</span>
                <span class="n">sample</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dirichilet_sample</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">dirichilet_sample</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">corresponding_distinct_sample</span><span class="p">:</span>
                   <span class="n">corresponding_distinct_sample</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dirichilet_sample</span><span class="p">)</span> 
                <span class="k">break</span>
            <span class="k">if</span> <span class="n">uniform_sample</span> <span class="o">&gt;</span> <span class="n">initial_interval</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">and</span> \
                                          <span class="n">uniform_sample</span> <span class="o">&lt;</span> <span class="n">initial_interval</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">sample</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">corresponding_distinct_sample</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="k">break</span>
        <span class="n">initial_interval</span> <span class="o">=</span> <span class="n">update_interval</span><span class="p">(</span><span class="n">corresponding_distinct_sample</span><span class="p">,</span> <span class="n">sample</span><span class="p">,</span> <span class="n">alpha</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">sample</span>
        
<span class="k">def</span> <span class="nf">update_interval</span><span class="p">(</span><span class="n">corresponding_distinct_sample</span><span class="p">,</span><span class="n">sample</span><span class="p">,</span><span class="n">alpha</span><span class="p">):</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"incorrect input"</span><span class="p">)</span>
        <span class="k">return</span> 
    <span class="n">interval</span><span class="o">=</span><span class="p">[]</span>
    <span class="n">first_interval</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">divide</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">interval</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">first_interval</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">corresponding_distinct_sample</span><span class="p">)):</span>
        <span class="n">number_of_sample</span>  <span class="o">=</span> <span class="n">sample</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">corresponding_distinct_sample</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> 
        <span class="n">temp_interval</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">divide</span><span class="p">(</span><span class="n">number_of_sample</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">interval</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp_interval</span> <span class="o">+</span> <span class="n">interval</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">interval</span>
        
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">simulation_dirichilet</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">collections</span><span class="p">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>

</code></pre></div></div>

<h4 id="reference">Reference</h4>
<ol>
  <li><a href="https://en.wikipedia.org/wiki/Dirichlet_process#Formal_definition">Dirichlet process</a></li>
</ol>
:ET