I"<h4 id="syntax">Syntax</h4>
<ol>
  <li>CMakeLists files follow a simple syntax consisting of comments, commands, and
white space</li>
  <li>A command: consists of the command name, opening parenthesis, white space
separated arguments and a closing parenthesis.</li>
  <li>All white space are ignored except to separated arguments.</li>
</ol>

<h4 id="variable">Variable</h4>
<ol>
  <li>Variables are the basic unit of storage in the CMake Language. Their values
are always of string type</li>
  <li><strong>set()</strong> and <strong>unset()</strong> commands explicitly set or unset a variable.</li>
  <li>variable names are case-sensitive</li>
</ol>

<h5 id="-and-">${} and ‚Äú${}‚Äù</h5>
<ol>
  <li>${}: means variable reference, and is evalued inside a quoted argument or an unquoted argument.
A variable reference is replaced by the value of the variable, or by the empty string if the
variable is not set.</li>
</ol>

<h4 id="invoke">Invoke</h4>
<p>To invoke a command you write the command name and some words between parentheses. However, these
words do not correspond to the arguments the command receive in a one-to-one fashion</p>
<ol>
  <li>Each word become zero or more arguments, and all the arguments get concatenated together.</li>
  <li>Unless a word is quoted, it is treated as a list and is expanded to multiple arguments</li>
  <li>A quoted word always becomes a single argument.</li>
</ol>

<h4 id="project-command">Project Command</h4>
<ol>
  <li>If no languages specified then CMake defaults to supporting C and C++</li>
  <li>if <strong>NONE</strong> language is passed then CMake includes no language specific
support</li>
  <li>Whenever C++ language support is specified then C language support will also
be loaded</li>
</ol>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">project</span> <span class="p">(</span>projectname [CXX] [C] [Java] [NONE]<span class="p">)</span>
</code></pre></div></div>

<h4 id="flow-control">Flow Control</h4>

<ol>
  <li>if (variable): True if the variable‚Äôs value is not <strong>empty,0,FALSE</strong> or
<strong>NOTFOUND</strong></li>
  <li>if (NOT variable)</li>
  <li>if (variable1 AND variable2)</li>
  <li>if (variable1 OR variable2)</li>
  <li>if (COMMAND command-name): True if the given name is a command that can be
invoked</li>
  <li>if (DEFINED variable): True if the given variable has been set, regardless of
what value it was set to</li>
</ol>

<h5 id="conditional-statements">Conditional Statements</h5>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">if</span> <span class="p">(</span>FOO<span class="p">)</span>
	<span class="c1"># do something</span>
<span class="nb">else</span> <span class="p">(</span>FOO<span class="p">)</span>
    <span class="c1"># do something else</span>
<span class="nb">endif</span> <span class="p">(</span>FOO<span class="p">)</span>
</code></pre></div></div>

<h4 id="environment-variables">Environment Variables</h4>
<ol>
  <li>Environment Variables are like ordinary Variables, with the following
differences:
    <ul>
      <li>Scope: Environment variables have global scope in a CMake process. They are
never cached.</li>
      <li>Initialization: Initial values of the CMake environment variables are those of
the calling process. Values can be changed using the <strong>set()</strong> and
<strong>unset()</strong> commands.</li>
    </ul>
  </li>
</ol>

<h4 id="comment">comment</h4>
<ol>
  <li>line comment: #</li>
  <li>block comment: #[[ ]]</li>
</ol>

:ET