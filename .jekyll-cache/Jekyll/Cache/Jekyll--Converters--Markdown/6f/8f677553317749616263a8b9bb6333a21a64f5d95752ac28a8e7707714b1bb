I"-*<p>layout: post
title: “A.D.T.: List Implementation 2”
keywords: []
description: 
category: “CS”
tags: [“A.D.T.”]
—</p>

<h4 id="a">A</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
</span><span class="k">struct</span> <span class="nc">node</span> 
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">ptr_next</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">head</span><span class="o">=</span><span class="nb">nullptr</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="nf">insert</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">==</span> <span class="nb">nullptr</span><span class="p">){</span>
		<span class="n">ptr_node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
		<span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">ptr_node</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">ptr_node</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">ptr_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">!=</span><span class="nb">nullptr</span><span class="p">)</span> 
	<span class="p">{</span> 
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
		<span class="n">display</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">node_counter</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">node_counter</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">node_sum</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>
	<span class="k">return</span> <span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">+</span> <span class="n">node_sum</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">node_max</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="n">ptr_node</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">){</span><span class="k">return</span> <span class="o">-</span><span class="mi">99999999</span><span class="p">;}</span>
	<span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="n">node_max</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">));</span>
<span class="p">}</span>
	
<span class="k">struct</span> <span class="nc">node</span><span class="o">*</span> <span class="nf">node_search</span><span class="p">(</span><span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">ptr_node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">==</span><span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nb">nullptr</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">if</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="n">ptr_node</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">node_search</span><span class="p">(</span><span class="n">ptr_node</span><span class="o">-&gt;</span><span class="n">ptr_next</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">head</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
	<span class="n">head</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
	<span class="n">head</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
	<span class="n">head</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">15</span><span class="p">);</span>
	<span class="n">display</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">number</span><span class="o">=</span> <span class="n">node_counter</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"node number "</span><span class="o">&lt;&lt;</span><span class="n">number</span><span class="o">&lt;&lt;</span><span class="s">"  "</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">sum</span><span class="o">=</span> <span class="n">node_sum</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"node sum "</span><span class="o">&lt;&lt;</span><span class="n">sum</span><span class="o">&lt;&lt;</span><span class="s">"  "</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">max</span><span class="o">=</span> <span class="n">node_max</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"node max "</span><span class="o">&lt;&lt;</span><span class="n">max</span><span class="o">&lt;&lt;</span><span class="s">"  "</span><span class="p">;</span>
	<span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span> <span class="n">target</span><span class="o">=</span><span class="n">node_search</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="mi">11</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
	<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"node target not found"</span><span class="p">;</span>
	<span class="p">}</span><span class="k">else</span>
	<span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"node target found "</span><span class="o">&lt;&lt;</span><span class="n">target</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;}</span>
<span class="p">}</span>


</code></pre></div></div>

:ET