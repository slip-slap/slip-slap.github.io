I"û
<h4 id="a">A</h4>
<ol>
  <li>we use array to implement heap data structure.</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
</span>

<span class="k">class</span> <span class="nc">max_heap</span>
<span class="p">{</span>
	<span class="nl">private:</span>
		<span class="kt">int</span> <span class="n">heap_array</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
		<span class="kt">int</span> <span class="n">pointer</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nl">public:</span>
		<span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">priority</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="n">pointer</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">heap_array</span><span class="p">[</span><span class="n">pointer</span><span class="p">]</span> <span class="o">=</span> <span class="n">priority</span><span class="p">;</span> 
			<span class="p">}</span>

			<span class="kt">int</span> <span class="n">parent_pos</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">floor</span><span class="p">((</span><span class="n">pointer</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="p">;</span>
			<span class="kt">int</span> <span class="n">child_pos</span> <span class="o">=</span> <span class="n">pointer</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
			<span class="k">while</span><span class="p">(</span><span class="n">parent_pos</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span><span class="p">(</span><span class="n">heap_array</span><span class="p">[</span><span class="n">parent_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;</span><span class="n">heap_array</span><span class="p">[</span><span class="n">child_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
				<span class="p">{</span>
					<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">heap_array</span><span class="p">[</span><span class="n">parent_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
					<span class="n">heap_array</span><span class="p">[</span><span class="n">parent_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">heap_array</span><span class="p">[</span><span class="n">child_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
					<span class="n">heap_array</span><span class="p">[</span><span class="n">child_pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="k">if</span><span class="p">(</span><span class="n">parent_pos</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="n">parent_pos</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">floor</span><span class="p">((</span><span class="n">parent_pos</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="p">;</span>
				<span class="n">child_pos</span><span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">floor</span><span class="p">((</span><span class="n">child_pos</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="p">;</span>
			<span class="p">}</span>
			<span class="n">pointer</span><span class="o">++</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="kt">void</span> <span class="n">display</span><span class="p">(){</span>
			<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">15</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">heap_array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>

	<span class="n">max_heap</span> <span class="n">my_heap</span><span class="p">;</span>
	<span class="n">my_heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
	<span class="n">my_heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
	<span class="n">my_heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
	<span class="n">my_heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
	<span class="n">my_heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	<span class="n">my_heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
	<span class="n">my_heap</span><span class="p">.</span><span class="n">display</span><span class="p">();</span>

<span class="p">}</span>
</code></pre></div></div>
:ET