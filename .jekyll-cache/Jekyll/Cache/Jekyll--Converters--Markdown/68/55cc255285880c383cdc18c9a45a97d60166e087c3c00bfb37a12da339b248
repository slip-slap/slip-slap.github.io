I"»
<h4 id="21-undoing-of-a-commit">2.1 Undoing of a commit</h4>
<p>One of the common undos takes place when you commit too early and possibly
forget to add some files, or you mess up your commit message. If you want to
redo that commit, make the additional changes you forgot, stage them, and commit
again using the ‚Äìamend option</p>
<ul>
  <li>When you‚Äôre amending your last commit, you‚Äôre not so much fixing it as
replacing it entirely with a new, improved commit that pushes the old commit
out of the way and puts the new commit in its place.</li>
  <li>Effectivelly, it‚Äôs as if the previous commit never happened, and it won‚Äôt show
up in your repository history.</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s1">'Initial commit'</span>
git add forgotten_file
git commit <span class="nt">--amend</span>
</code></pre></div></div>

<h4 id="example">Example</h4>
<p>you realize you forget modify a file after you make a commit.  suppose the
message associated with this commit is ‚Äúfix reading bug‚Äù.</p>

<p><img align="left" src="/images/git_amend.png" /></p>

<h4 id="git-reset">Git reset</h4>

<p>The first thing <em>reset</em> do is move what <em>HEAD</em> points to.</p>

<ul>
  <li>Compared with <em>git checkout</em>, <em>git reset</em> does a smaller-grained operation
among the three trees, i.e., working directory, index, and HEAD.</li>
</ul>
:ET