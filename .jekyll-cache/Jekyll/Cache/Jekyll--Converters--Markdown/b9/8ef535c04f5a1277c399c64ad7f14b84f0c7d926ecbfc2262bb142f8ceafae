I"<

<h4 id="1-type-parameters">1. Type Parameters</h4>
<p>Type parameters are introduced with either the keyword <em>typename</em> or the keyword
<em>class</em>: the two are entirely equivalent.</p>
<ol>
  <li>The keyword must be followed by a simple identifier and that identifier must
be followed by a comma to denote the start of then next parameter
declaration.</li>
  <li>A closing angle bracket to denote the end of the parameterization clause, or
an equal sign to denote the beginning of a default template argument.</li>
</ol>

<h4 id="2-nontype-parameters">2. Nontype parameters</h4>

<h4 id="3-template-template-parameters">3. Template template parameters</h4>
<p>Template template parameters are placeholders for class templates. They are
declared much like class templates, but the keywords struct and union can not be
used:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">X</span><span class="p">&gt;</span> <span class="k">class</span> <span class="nc">C</span><span class="p">&gt;</span> <span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="n">C</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;*</span> <span class="n">p</span><span class="p">);</span> <span class="c1">// OK</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">X</span><span class="p">&gt;</span> <span class="k">struct</span> <span class="nc">C</span><span class="p">&gt;</span> <span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="n">C</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;*</span> <span class="n">p</span><span class="p">);</span> <span class="c1">// invalid</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">X</span><span class="p">&gt;</span> <span class="k">union</span> <span class="n">C</span><span class="p">&gt;</span> <span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="n">C</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;*</span> <span class="n">p</span><span class="p">);</span> <span class="c1">// invalid </span>
</code></pre></div></div>

:ET