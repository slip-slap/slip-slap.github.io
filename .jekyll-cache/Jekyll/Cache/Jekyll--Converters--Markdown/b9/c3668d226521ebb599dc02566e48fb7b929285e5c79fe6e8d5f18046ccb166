I"o
<h4 id="introduction">Introduction</h4>
<p>The x86 CPUs provide 20 basic instruction classes.</p>
<ol>
  <li>Seven of these instructions have two operands</li>
  <li>Eight of these instructions have a single operand</li>
  <li>Five instructions have no operands at all</li>
</ol>

<h4 id="mov">Mov</h4>
<ol>
  <li>mov
    <pre><code class="language-ass">mov reg, reg/memory/constant
mov memory, reg
</code></pre>
    <ul>
      <li>reg is any of ax,bx,cx, or dx; constant is a numberic constant(using hexadecimal notation)</li>
      <li>memory is an operand specifying a memory location.</li>
    </ul>
  </li>
  <li>add: adds the value of the second operand to the first (register) operand, leaving the sum in the
first operand</li>
  <li>sub: subtract the value of the second operand from the first, leaving the difference in the first
operand.</li>
  <li>cmp: compares the first operand against the second and saves the result of this comparison for
use with one of the conditional jum instructions.</li>
  <li>and,or: compute the corresponding bitwise logical operations on the two operands and store the
result into the first operand</li>
  <li>not: inverts the bits in the single memory or register operand.</li>
</ol>

<h4 id="2-control-transfer-instructions">2. Control Transfer Instructions</h4>
<ol>
  <li>ja    dest – Jump if above</li>
  <li>jae   dest – Jump if above or equal</li>
  <li>jb    dest – Jump if below</li>
  <li>jbe   dest – Jump if below or equal</li>
  <li>je    dest – Jump if equal</li>
  <li>jne   dest – Jump if not equal</li>
  <li>jmp   dest – Uncontidional jump</li>
</ol>

<h4 id="3">3.</h4>
<p>The get and put instructions let you read and write integer values.</p>
<ol>
  <li>Get will stop and prompt the user for a hexadecimal value and then store that value into the ax
register.</li>
  <li>Put displays the value of the ax register.</li>
</ol>

:ET